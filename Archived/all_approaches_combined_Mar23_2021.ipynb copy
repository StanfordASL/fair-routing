{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Import relevant modules\n",
    "import numpy as np\n",
    "import pandas as pd\n",
    "import zipfile\n",
    "from solution_implementation import SolutionImplementations\n",
    "import matplotlib.pyplot as plt"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "list_cities = ['Tiergarten', 'Friedrichshain', 'Anaheim', 'Massachusetts', 'SiouxFalls', 'PrenzlauerbergCenter']\n",
    "percentile_val = 98"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Implement All Methods"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1.00\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/devanshjalota/Documents/GitHub/Differential_Pricing/solution_implementation.py:70: ParserWarning: Falling back to the 'python' engine because the 'c' engine does not support regex separators (separators > 1 char and different from '\\s+' are interpreted as regex); you can avoid this warning by specifying engine='python'.\n",
      "  paths_df = pd.read_csv(loc_+alpha_val+'/paths.csv', sep='delimiter', header=None)\n",
      "/Users/devanshjalota/Documents/GitHub/Differential_Pricing/solution_implementation.py:88: FutureWarning: arrays to stack must be passed as a \"sequence\" type such as list or tuple. Support for non-sequence iterables such as generators is deprecated as of NumPy 1.16 and will raise an error in the future.\n",
      "  paths_arr_new = np.vstack({tuple(row) for row in paths_arr_new})\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1.05\n",
      "1.10\n",
      "1.15\n",
      "1.20\n",
      "1.25\n",
      "1.30\n",
      "1.35\n",
      "1.40\n",
      "1.45\n",
      "1.50\n",
      "1.55\n",
      "1.60\n",
      "1.65\n",
      "1.70\n",
      "1.75\n",
      "1.80\n",
      "1.85\n",
      "1.90\n",
      "1.95\n",
      "2.00\n",
      "1.00\n",
      "1.05\n",
      "1.10\n",
      "1.15\n",
      "1.20\n",
      "1.25\n",
      "1.30\n",
      "1.35\n",
      "1.40\n",
      "1.45\n",
      "1.50\n",
      "1.55\n",
      "1.60\n",
      "1.65\n",
      "1.70\n",
      "1.75\n",
      "1.80\n",
      "1.85\n",
      "1.90\n",
      "1.95\n",
      "2.00\n",
      "1.00\n",
      "1.05\n",
      "1.10\n",
      "1.15\n",
      "1.20\n",
      "1.25\n",
      "1.30\n",
      "1.35\n",
      "1.40\n",
      "1.45\n",
      "1.50\n",
      "1.55\n",
      "1.60\n",
      "1.65\n",
      "1.70\n",
      "1.75\n",
      "1.80\n",
      "1.85\n",
      "1.90\n",
      "1.95\n",
      "2.00\n",
      "1.00\n",
      "1.05\n",
      "1.10\n",
      "1.15\n",
      "1.20\n",
      "1.25\n",
      "1.30\n",
      "1.35\n",
      "1.40\n",
      "1.45\n",
      "1.50\n",
      "1.55\n",
      "1.60\n",
      "1.65\n",
      "1.70\n",
      "1.75\n",
      "1.80\n",
      "1.85\n",
      "1.90\n",
      "1.95\n",
      "2.00\n",
      "1.00\n",
      "1.05\n",
      "1.10\n",
      "1.15\n",
      "1.20\n",
      "1.25\n",
      "1.30\n",
      "1.35\n",
      "1.40\n",
      "1.45\n",
      "1.50\n",
      "1.55\n",
      "1.60\n",
      "1.65\n",
      "1.70\n",
      "1.75\n",
      "1.80\n",
      "1.85\n",
      "1.90\n",
      "1.95\n",
      "2.00\n",
      "1.00\n",
      "1.05\n",
      "1.10\n",
      "1.15\n",
      "1.20\n",
      "1.25\n",
      "1.30\n",
      "1.35\n",
      "1.40\n",
      "1.45\n",
      "1.50\n",
      "1.55\n",
      "1.60\n",
      "1.65\n",
      "1.70\n",
      "1.75\n",
      "1.80\n",
      "1.85\n",
      "1.90\n",
      "1.95\n",
      "2.00\n",
      "0\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/devanshjalota/Documents/GitHub/Differential_Pricing/solution_implementation.py:224: ParserWarning: Falling back to the 'python' engine because the 'c' engine does not support regex separators (separators > 1 char and different from '\\s+' are interpreted as regex); you can avoid this warning by specifying engine='python'.\n",
      "  paths_df = pd.read_csv(main_zip+alpha_val+'/paths.csv', sep='delimiter', header=None)\n",
      "/Users/devanshjalota/Documents/GitHub/Differential_Pricing/solution_implementation.py:242: FutureWarning: arrays to stack must be passed as a \"sequence\" type such as list or tuple. Support for non-sequence iterables such as generators is deprecated as of NumPy 1.16 and will raise an error in the future.\n",
      "  paths_arr_new = np.vstack({tuple(row) for row in paths_arr_new})\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "941\n",
      ".01\n",
      "870\n",
      ".02\n",
      "886\n",
      ".03\n",
      "809\n",
      ".04\n",
      "889\n",
      ".05\n",
      "886\n",
      "23,190,439,607,60,359,10,436,505,504,501,498,4,456,460,49,465\n",
      "['23,190,439,607,60,359,10,436,505,504,501,498,4,456,460,49,465'\n",
      " '23,190,439,607,60,359,10,436,505,504,501,498,5,472,78,488,482']\n",
      ".06\n",
      "886\n",
      ".07\n",
      "806\n",
      ".08\n",
      "885\n",
      ".09\n",
      "885\n",
      ".10\n",
      "889\n",
      ".11\n",
      "884\n",
      ".12\n",
      "889\n",
      ".13\n",
      "877\n",
      ".14\n",
      "885\n",
      ".15\n",
      "894\n",
      ".16\n",
      "878\n",
      ".17\n",
      "891\n",
      ".18\n",
      "895\n",
      ".19\n",
      "899\n",
      ".20\n",
      "892\n",
      ".21\n",
      "892\n",
      ".22\n",
      "902\n",
      ".23\n",
      "894\n",
      ".24\n",
      "891\n",
      ".25\n",
      "902\n",
      ".26\n",
      "892\n",
      ".27\n",
      "880\n",
      ".28\n",
      "892\n",
      ".29\n",
      "886\n",
      ".30\n",
      "894\n",
      ".31\n",
      "895\n",
      ".32\n",
      "884\n",
      ".33\n",
      "890\n",
      ".34\n",
      "897\n",
      ".35\n",
      "892\n",
      ".36\n",
      "901\n",
      ".37\n",
      "903\n",
      ".38\n",
      "889\n",
      ".39\n",
      "894\n",
      ".40\n",
      "899\n",
      ".41\n",
      "896\n",
      ".42\n",
      "817\n",
      ".43\n",
      "895\n",
      ".44\n",
      "889\n",
      ".45\n",
      "901\n",
      ".46\n",
      "901\n",
      ".47\n",
      "861\n",
      ".48\n",
      "893\n",
      ".49\n",
      "890\n",
      ".50\n",
      "890\n",
      ".51\n",
      "777\n",
      ".52\n",
      "901\n",
      ".53\n",
      "867\n",
      ".54\n",
      "894\n",
      ".55\n",
      "892\n",
      ".56\n",
      "897\n",
      ".57\n",
      "900\n",
      ".58\n",
      "890\n",
      ".59\n",
      "884\n",
      ".60\n",
      "884\n",
      ".61\n",
      "887\n",
      ".62\n",
      "893\n",
      ".63\n",
      "901\n",
      ".64\n",
      "893\n",
      ".65\n",
      "907\n",
      ".66\n",
      "897\n",
      ".67\n",
      "901\n",
      ".68\n",
      "885\n",
      ".69\n",
      "893\n",
      ".70\n",
      "896\n",
      ".71\n",
      "901\n",
      ".72\n",
      "885\n",
      ".73\n",
      "899\n",
      ".74\n",
      "876\n",
      ".75\n",
      "900\n",
      ".76\n",
      "890\n",
      ".77\n",
      "883\n",
      ".78\n",
      "901\n",
      ".79\n",
      "899\n",
      ".80\n",
      "897\n",
      ".81\n",
      "895\n",
      ".82\n",
      "885\n",
      ".83\n",
      "904\n",
      ".84\n",
      "869\n",
      ".85\n",
      "896\n",
      ".86\n",
      "895\n",
      ".87\n",
      "889\n",
      ".88\n",
      "895\n",
      ".89\n",
      "872\n",
      ".90\n",
      "890\n",
      ".91\n",
      "867\n",
      ".92\n",
      "887\n",
      ".93\n",
      "879\n",
      ".94\n",
      "862\n",
      ".95\n",
      "876\n",
      ".96\n",
      "877\n",
      ".97\n",
      "926\n",
      ".98\n",
      "928\n",
      ".99\n",
      "875\n",
      "1.00\n",
      "873\n",
      "0\n",
      "763\n",
      ".01\n",
      "721\n",
      ".02\n",
      "714\n",
      ".03\n",
      "730\n",
      ".04\n",
      "747\n",
      ".05\n",
      "775\n",
      "26,482,83,498,190,194,248,246,66,391,0,109,6,123,120,106\n",
      "['26,482,83,498,190,194,248,246,66,391,0,109,6,123,120,106']\n",
      ".06\n",
      "701\n",
      ".07\n",
      "707\n",
      ".08\n",
      "793\n",
      ".09\n",
      "720\n",
      ".10\n",
      "779\n",
      ".11\n",
      "707\n",
      ".12\n",
      "755\n",
      ".13\n",
      "722\n",
      ".14\n",
      "724\n",
      ".15\n",
      "760\n",
      ".16\n",
      "736\n",
      ".17\n",
      "748\n",
      ".18\n",
      "717\n",
      ".19\n",
      "676\n",
      ".20\n",
      "690\n",
      ".21\n",
      "770\n",
      ".22\n",
      "704\n",
      ".23\n",
      "676\n",
      ".24\n",
      "714\n",
      ".25\n",
      "749\n",
      ".26\n",
      "732\n",
      ".27\n",
      "766\n",
      ".28\n",
      "764\n",
      ".29\n",
      "734\n",
      ".30\n",
      "723\n",
      ".31\n",
      "710\n",
      ".32\n",
      "766\n",
      ".33\n",
      "746\n",
      ".34\n",
      "696\n",
      ".35\n",
      "713\n",
      ".36\n",
      "773\n",
      ".37\n",
      "730\n",
      ".38\n",
      "778\n",
      ".39\n",
      "781\n",
      ".40\n",
      "782\n",
      ".41\n",
      "796\n",
      ".42\n",
      "704\n",
      ".43\n",
      "795\n",
      ".44\n",
      "730\n",
      ".45\n",
      "728\n",
      ".46\n",
      "781\n",
      ".47\n",
      "751\n",
      ".48\n",
      "779\n",
      ".49\n",
      "723\n",
      ".50\n",
      "803\n",
      ".51\n",
      "790\n",
      ".52\n",
      "795\n",
      ".53\n",
      "792\n",
      ".54\n",
      "798\n",
      ".55\n",
      "795\n",
      ".56\n",
      "795\n",
      ".57\n",
      "798\n",
      ".58\n",
      "798\n",
      ".59\n",
      "778\n",
      ".60\n",
      "682\n",
      ".61\n",
      "659\n",
      ".62\n",
      "777\n",
      ".63\n",
      "798\n",
      ".64\n",
      "735\n",
      ".65\n",
      "725\n",
      ".66\n",
      "785\n",
      ".67\n",
      "786\n",
      ".68\n",
      "776\n",
      ".69\n",
      "779\n",
      ".70\n",
      "763\n",
      ".71\n",
      "713\n",
      ".72\n",
      "798\n",
      ".73\n",
      "762\n",
      ".74\n",
      "792\n",
      ".75\n",
      "778\n",
      ".76\n",
      "696\n",
      ".77\n",
      "809\n",
      ".78\n",
      "724\n",
      ".79\n",
      "784\n",
      ".80\n",
      "799\n",
      ".81\n",
      "789\n",
      ".82\n",
      "786\n",
      ".83\n",
      "778\n",
      ".84\n",
      "769\n",
      ".85\n",
      "601\n",
      ".86\n",
      "775\n",
      ".87\n",
      "750\n",
      ".88\n",
      "768\n",
      ".89\n",
      "778\n",
      ".90\n",
      "775\n",
      ".91\n",
      "780\n",
      ".92\n",
      "769\n",
      ".93\n",
      "728\n",
      ".94\n",
      "757\n",
      ".95\n",
      "761\n",
      ".96\n",
      "767\n",
      ".97\n",
      "723\n",
      ".98\n",
      "777\n",
      ".99\n",
      "762\n",
      "1.00\n",
      "762\n",
      "0\n",
      "2166\n",
      ".01\n",
      "1975\n",
      ".02\n",
      "2021\n",
      ".03\n",
      "2070\n",
      ".04\n",
      "2091\n",
      ".05\n",
      "2098\n",
      "4,181,182,184,185,186,188,189,191,192,194,195,196,198,199,201,202,203,205,206,98,159,160,162,163,165,166,168,169,171,172,175,176,177,179,180\n",
      "['4,181,182,184,185,186,188,189,191,192,194,195,196,198,199,201,202,203,205,206,98,159,160,162,163,165,166,168,169,171,172,175,176,177,179,180']\n",
      ".06\n",
      "1990\n",
      ".07\n",
      "2127\n",
      ".08\n",
      "1966\n",
      ".09\n",
      "2068\n",
      ".10\n",
      "2074\n",
      ".11\n",
      "2057\n",
      ".12\n",
      "2066\n",
      ".13\n",
      "2027\n",
      ".14\n",
      "2106\n",
      ".15\n",
      "1990\n",
      ".16\n",
      "2039\n",
      ".17\n",
      "2060\n",
      ".18\n",
      "2058\n",
      ".19\n",
      "1685\n",
      ".20\n",
      "2042\n",
      ".21\n",
      "2156\n",
      ".22\n",
      "1988\n",
      ".23\n",
      "2018\n",
      ".24\n",
      "2053\n",
      ".25\n",
      "2017\n",
      ".26\n",
      "2002\n",
      ".27\n",
      "2030\n",
      ".28\n",
      "2020\n",
      ".29\n",
      "2013\n",
      ".30\n",
      "2174\n",
      ".31\n",
      "2156\n",
      ".32\n",
      "2116\n",
      ".33\n",
      "2029\n",
      ".34\n",
      "2123\n",
      ".35\n",
      "1978\n",
      ".36\n",
      "2047\n",
      ".37\n",
      "2073\n",
      ".38\n",
      "2099\n",
      ".39\n",
      "2063\n",
      ".40\n",
      "2090\n",
      ".41\n",
      "2151\n",
      ".42\n",
      "2073\n",
      ".43\n",
      "2079\n",
      ".44\n",
      "2060\n",
      ".45\n",
      "2074\n",
      ".46\n",
      "2136\n",
      ".47\n",
      "2093\n",
      ".48\n",
      "2204\n",
      ".49\n",
      "2138\n",
      ".50\n",
      "2072\n",
      ".51\n",
      "2115\n",
      ".52\n",
      "2077\n",
      ".53\n",
      "2074\n",
      ".54\n",
      "2072\n",
      ".55\n",
      "2092\n",
      ".56\n",
      "2109\n",
      ".57\n",
      "2057\n",
      ".58\n",
      "2097\n",
      ".59\n",
      "2123\n",
      ".60\n",
      "2133\n",
      ".61\n",
      "2146\n",
      ".62\n",
      "2129\n",
      ".63\n",
      "2140\n",
      ".64\n",
      "2214\n",
      ".65\n",
      "2140\n",
      ".66\n",
      "2154\n",
      ".67\n",
      "2229\n",
      ".68\n",
      "2099\n",
      ".69\n",
      "2173\n",
      ".70\n",
      "2177\n",
      ".71\n",
      "2101\n",
      ".72\n",
      "2115\n",
      ".73\n",
      "2143\n",
      ".74\n",
      "2173\n",
      ".75\n",
      "2140\n",
      ".76\n",
      "2143\n",
      ".77\n",
      "2261\n",
      ".78\n",
      "2128\n",
      ".79\n",
      "2146\n",
      ".80\n",
      "2166\n",
      ".81\n",
      "2124\n",
      ".82\n",
      "2123\n",
      ".83\n",
      "2149\n",
      ".84\n",
      "2108\n",
      ".85\n",
      "2120\n",
      ".86\n",
      "2157\n",
      ".87\n",
      "2158\n",
      ".88\n",
      "2085\n",
      ".89\n",
      "2118\n",
      ".90\n",
      "2036\n",
      ".91\n",
      "2102\n",
      ".92\n",
      "2159\n",
      ".93\n",
      "2143\n",
      ".94\n",
      "2088\n",
      ".95\n",
      "2172\n",
      ".96\n",
      "2119\n",
      ".97\n",
      "2092\n",
      ".98\n",
      "2089\n",
      ".99\n",
      "2000\n",
      "1.00\n",
      "2143\n",
      "0\n",
      "1383\n",
      ".01\n",
      "1465\n",
      ".02\n",
      "1471\n",
      ".03\n",
      "1591\n",
      ".04\n",
      "1568\n",
      ".05\n",
      "1273\n",
      "45,74,69,82,87,119,116,222\n",
      "['45,74,69,82,87,119,116,222' '45,74,69,82,87,120,121,116,222']\n",
      ".06\n",
      "1560\n",
      ".07\n",
      "1510\n",
      ".08\n",
      "1544\n",
      ".09\n",
      "1504\n",
      ".10\n",
      "1520\n",
      ".11\n",
      "1551\n",
      ".12\n",
      "1601\n",
      ".13\n",
      "1762\n",
      ".14\n",
      "1695\n",
      ".15\n",
      "1779\n",
      ".16\n",
      "1745\n",
      ".17\n",
      "1744\n",
      ".18\n",
      "1753\n",
      ".19\n",
      "1656\n",
      ".20\n",
      "1634\n",
      ".21\n",
      "1725\n",
      ".22\n",
      "1860\n",
      ".23\n",
      "1760\n",
      ".24\n",
      "1637\n",
      ".25\n",
      "1881\n",
      ".26\n",
      "1898\n",
      ".27\n",
      "1916\n",
      ".28\n",
      "1966\n",
      ".29\n",
      "1831\n",
      ".30\n",
      "1894\n",
      ".31\n",
      "1910\n",
      ".32\n",
      "1898\n",
      ".33\n",
      "1988\n",
      ".34\n",
      "1921\n",
      ".35\n",
      "1950\n",
      ".36\n",
      "2005\n",
      ".37\n",
      "2042\n",
      ".38\n",
      "2056\n",
      ".39\n",
      "1786\n",
      ".40\n",
      "1952\n",
      ".41\n",
      "1936\n",
      ".42\n",
      "2011\n",
      ".43\n",
      "2003\n",
      ".44\n",
      "1957\n",
      ".45\n",
      "1941\n",
      ".46\n",
      "1952\n",
      ".47\n",
      "1792\n",
      ".48\n",
      "1961\n",
      ".49\n",
      "2062\n",
      ".50\n",
      "1927\n",
      ".51\n",
      "1963\n",
      ".52\n",
      "2163\n",
      ".53\n",
      "1907\n",
      ".54\n",
      "2031\n",
      ".55\n",
      "1711\n",
      ".56\n",
      "1786\n",
      ".57\n",
      "1884\n",
      ".58\n",
      "1764\n",
      ".59\n",
      "1909\n",
      ".60\n",
      "1838\n",
      ".61\n",
      "1975\n",
      ".62\n",
      "1857\n",
      ".63\n",
      "1981\n",
      ".64\n",
      "1439\n",
      ".65\n",
      "1814\n",
      ".66\n",
      "1349\n",
      ".67\n",
      "1988\n",
      ".68\n",
      "1765\n",
      ".69\n",
      "1984\n",
      ".70\n",
      "2013\n",
      ".71\n",
      "2000\n",
      ".72\n",
      "1990\n",
      ".73\n",
      "1936\n",
      ".74\n",
      "1966\n",
      ".75\n",
      "1962\n",
      ".76\n",
      "1838\n",
      ".77\n",
      "1888\n",
      ".78\n",
      "1748\n",
      ".79\n",
      "1853\n",
      ".80\n",
      "1879\n",
      ".81\n",
      "1527\n",
      ".82\n",
      "1846\n",
      ".83\n",
      "1867\n",
      ".84\n",
      "1762\n",
      ".85\n",
      "1760\n",
      ".86\n",
      "1838\n",
      ".87\n",
      "1914\n",
      ".88\n",
      "1846\n",
      ".89\n",
      "1556\n",
      ".90\n",
      "1844\n",
      ".91\n",
      "1867\n",
      ".92\n",
      "1900\n",
      ".93\n",
      "1851\n",
      ".94\n",
      "1865\n",
      ".95\n",
      "1822\n",
      ".96\n",
      "1813\n",
      ".97\n",
      "1879\n",
      ".98\n",
      "1968\n",
      ".99\n",
      "1808\n",
      "1.00\n",
      "1845\n",
      "[1.03423045 1.02571244 1.0252215  1.02340533 1.02260234 1.02175922\n",
      " 1.02136926 1.02092628 1.01985855 1.01939586 1.01830726 1.01777432\n",
      " 1.01717943 1.01602165 1.01527929 1.0146632  1.01573469 1.0139838\n",
      " 1.01316806 1.0122094  1.01093863 1.01085181 1.00995505 1.00967638\n",
      " 1.0056335  1.00397658 1.00378626 1.00366953 1.00278478 1.0008531\n",
      " 1.00033734 1.00002869 1.        ]\n",
      "[1.0102572793435023, 1.0615867560402865, 1.081858407079646, 1.1065518616397443, 1.118987069986265, 1.134903040020421, 1.1396564600448094, 1.1453578595317726, 1.1590069152232771, 1.1638181476733647, 1.1753132627482024, 1.1847486483568503, 1.1909413787634702, 1.1999217953363726, 1.2161420469521889, 1.2206335222204288, 1.2161405325569354, 1.2371398976253571, 1.2424706465153872, 1.2615549921207159, 1.2644645210700671, 1.2673156126640708, 1.2760041750647855, 1.2824949398200018, 1.3241405760504281, 1.364256522799317, 1.3658437817358018, 1.3677797216466632, 1.3994343640007871, 1.4377449472493988, 1.4402670622573346, 1.491295607476429, 1.4974377137925972]\n",
      "0\n",
      "755\n",
      ".01\n",
      "777\n",
      ".02\n",
      "767\n",
      ".03\n",
      "764\n",
      ".04\n",
      "776\n",
      ".05\n",
      "793\n",
      "17,55,62,69\n",
      "['17,55,62,69']\n",
      ".06\n",
      "786\n",
      ".07\n",
      "768\n",
      ".08\n",
      "807\n",
      ".09\n",
      "771\n",
      ".10\n",
      "888\n",
      ".11\n",
      "807\n",
      ".12\n",
      "792\n",
      ".13\n",
      "810\n",
      ".14\n",
      "951\n",
      ".15\n",
      "809\n",
      ".16\n",
      "823\n",
      ".17\n",
      "799\n",
      ".18\n",
      "829\n",
      ".19\n",
      "807\n",
      ".20\n",
      "806\n",
      ".21\n",
      "812\n",
      ".22\n",
      "835\n",
      ".23\n",
      "844\n",
      ".24\n",
      "895\n",
      ".25\n",
      "767\n",
      ".26\n",
      "907\n",
      ".27\n",
      "843\n",
      ".28\n",
      "830\n",
      ".29\n",
      "814\n",
      ".30\n",
      "814\n",
      ".31\n",
      "943\n",
      ".32\n",
      "848\n",
      ".33\n",
      "850\n",
      ".34\n",
      "865\n",
      ".35\n",
      "886\n",
      ".36\n",
      "815\n",
      ".37\n",
      "810\n",
      ".38\n",
      "859\n",
      ".39\n",
      "823\n",
      ".40\n",
      "854\n",
      ".41\n",
      "886\n",
      ".42\n",
      "844\n",
      ".43\n",
      "907\n",
      ".44\n",
      "902\n",
      ".45\n",
      "884\n",
      ".46\n",
      "852\n",
      ".47\n",
      "889\n",
      ".48\n",
      "905\n",
      ".49\n",
      "830\n",
      ".50\n",
      "894\n",
      ".51\n",
      "886\n",
      ".52\n",
      "848\n",
      ".53\n",
      "845\n",
      ".54\n",
      "888\n",
      ".55\n",
      "907\n",
      ".56\n",
      "841\n",
      ".57\n",
      "854\n",
      ".58\n",
      "845\n",
      ".59\n",
      "917\n",
      ".60\n",
      "876\n",
      ".61\n",
      "897\n",
      ".62\n",
      "894\n",
      ".63\n",
      "938\n",
      ".64\n",
      "851\n",
      ".65\n",
      "866\n",
      ".66\n",
      "949\n",
      ".67\n",
      "847\n",
      ".68\n",
      "869\n",
      ".69\n",
      "842\n",
      ".70\n",
      "833\n",
      ".71\n",
      "863\n",
      ".72\n",
      "813\n",
      ".73\n",
      "848\n",
      ".74\n",
      "943\n",
      ".75\n",
      "886\n",
      ".76\n",
      "885\n",
      ".77\n",
      "925\n",
      ".78\n",
      "842\n",
      ".79\n",
      "927\n",
      ".80\n",
      "880\n",
      ".81\n",
      "895\n",
      ".82\n",
      "935\n",
      ".83\n",
      "844\n",
      ".84\n",
      "879\n",
      ".85\n",
      "852\n",
      ".86\n",
      "811\n",
      ".87\n",
      "846\n",
      ".88\n",
      "952\n",
      ".89\n",
      "877\n",
      ".90\n",
      "951\n",
      ".91\n",
      "833\n",
      ".92\n",
      "827\n",
      ".93\n",
      "919\n",
      ".94\n",
      "943\n",
      ".95\n",
      "855\n",
      ".96\n",
      "841\n",
      ".97\n",
      "926\n",
      ".98\n",
      "892\n",
      ".99\n",
      "939\n",
      "1.00\n",
      "885\n",
      "0\n",
      "2007\n",
      ".01\n",
      "2058\n",
      ".02\n",
      "2335\n",
      ".03\n",
      "2076\n",
      ".04\n",
      "2325\n",
      ".05\n",
      "2467\n",
      "18,449,452,474,702,453\n",
      "['18,449,452,474,702,453']\n",
      ".06\n",
      "2352\n",
      ".07\n",
      "2391\n",
      ".08\n",
      "2319\n",
      ".09\n",
      "2499\n",
      ".10\n",
      "2541\n",
      ".11\n",
      "2553\n",
      ".12\n",
      "2634\n",
      ".13\n",
      "2560\n",
      ".14\n",
      "2449\n",
      ".15\n",
      "2562\n",
      ".16\n",
      "2574\n",
      ".17\n",
      "2793\n",
      ".18\n",
      "2567\n",
      ".19\n"
     ]
    }
   ],
   "source": [
    "# Solve Jahn_et_al\n",
    "final_beta_2005_dict, total_cost_2005_dict, percentile_beta_2005_dict = SolutionImplementations.Jahn_Et_Al(list_cities, percentile_val)\n",
    "\n",
    "#Solve I-TAP 0.01 Discretization\n",
    "final_beta_dict, total_cost_dict, percentile_beta_dict, final_beta_original_dict, total_cost_original_dict = SolutionImplementations.ITAP_001(list_cities, percentile_val)\n",
    "\n",
    "#Solve I-TAP 0.05 Discretization\n",
    "final_beta_dict_05, total_cost_dict_05, percentile_beta_dict_05 = SolutionImplementations.ITAP_005(list_cities, percentile_val)\n",
    "\n",
    "#Solve I-Solution 0.01 Discretization\n",
    "beta_alpha_solution_dict, total_tt_solution_dict, beta_alpha_dist_solution_dict = SolutionImplementations.ISolution_001(list_cities, percentile_val)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Plots"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Pareto Plot"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "fig = plt.figure(figsize=(10, 10))\n",
    "ax = fig.add_subplot(231)\n",
    "ax.plot(final_beta_dict['Massachusetts'], total_cost_dict['Massachusetts']/total_cost_dict['Massachusetts'][-1])\n",
    "ax.plot(final_beta_dict_05['Massachusetts'], total_cost_dict_05['Massachusetts']/total_cost_dict_05['Massachusetts'][-1])\n",
    "ax.plot(beta_alpha_solution_dict['Massachusetts'], total_tt_solution_dict['Massachusetts']/total_tt_solution_dict['Massachusetts'][0])\n",
    "ax.plot(final_beta_2005_dict['Massachusetts'], total_cost_2005_dict['Massachusetts']/total_cost_2005_dict['Massachusetts'][-1])\n",
    "ax.set_xlabel('Loaded Unfairness')\n",
    "ax.set_ylabel(r'Inefficiency Ratio $\\rho(\\mathbf{z}(\\alpha))$')\n",
    "ax.legend(['I-TAP-0.01', 'I-TAP-0.05', 'I-Solution', 'Jahn et al.'])\n",
    "ax.set_title('Massachusetts')\n",
    "ax.set_ylim([0.995, 1.1])\n",
    "\n",
    "ax2 = fig.add_subplot(232)\n",
    "ax2.plot(final_beta_dict['Tiergarten'], total_cost_dict['Tiergarten']/total_cost_dict['Tiergarten'][-1])\n",
    "ax2.plot(final_beta_dict_05['Tiergarten'], total_cost_dict_05['Tiergarten']/total_cost_dict_05['Tiergarten'][-1])\n",
    "ax2.plot(beta_alpha_solution_dict['Tiergarten'], total_tt_solution_dict['Tiergarten']/total_tt_solution_dict['Tiergarten'][0])\n",
    "ax2.plot(final_beta_2005_dict['Tiergarten'], total_cost_2005_dict['Tiergarten']/total_cost_2005_dict['Tiergarten'][-1])\n",
    "ax2.set_xlabel('Loaded Unfairness')\n",
    "ax2.set_ylabel(r'Inefficiency Ratio $\\rho(\\mathbf{z}(\\alpha))$')\n",
    "ax2.legend(['I-TAP-0.01', 'I-TAP-0.05', 'I-Solution', 'Jahn et al.'])\n",
    "ax2.set_title('Tiergarten')\n",
    "ax2.set_ylim([0.995, 1.1])\n",
    "\n",
    "ax3 = fig.add_subplot(233)\n",
    "ax3.plot(final_beta_dict['SiouxFalls'], total_cost_dict['SiouxFalls']/total_cost_dict['SiouxFalls'][-1])\n",
    "ax3.plot(final_beta_dict_05['SiouxFalls'], total_cost_dict_05['SiouxFalls']/total_cost_dict_05['SiouxFalls'][-1])\n",
    "ax3.plot(beta_alpha_solution_dict['SiouxFalls'], total_tt_solution_dict['SiouxFalls']/total_tt_solution_dict['SiouxFalls'][0])\n",
    "ax3.plot(final_beta_2005_dict['SiouxFalls'], total_cost_2005_dict['SiouxFalls']/total_cost_2005_dict['SiouxFalls'][-1])\n",
    "ax3.set_xlabel('Loaded Unfairness')\n",
    "ax3.set_ylabel(r'Inefficiency Ratio $\\rho(\\mathbf{z}(\\alpha))$')\n",
    "ax3.legend(['I-TAP-0.01', 'I-TAP-0.05', 'I-Solution', 'Jahn et al.'])\n",
    "ax3.set_title('SiouxFalls')\n",
    "ax3.set_ylim([0.995, 1.1])\n",
    "\n",
    "ax4 = fig.add_subplot(234)\n",
    "ax4.plot(final_beta_dict['Anaheim'], total_cost_dict['Anaheim']/total_cost_dict['Anaheim'][-1])\n",
    "ax4.plot(final_beta_dict_05['Anaheim'], total_cost_dict_05['Anaheim']/total_cost_dict_05['Anaheim'][-1])\n",
    "ax4.plot(beta_alpha_solution_dict['Anaheim'], total_tt_solution_dict['Anaheim']/total_tt_solution_dict['Anaheim'][0])\n",
    "ax4.plot(final_beta_2005_dict['Anaheim'], total_cost_2005_dict['Anaheim']/total_cost_2005_dict['Anaheim'][-1])\n",
    "ax4.set_xlabel('Loaded Unfairness')\n",
    "ax4.set_ylabel(r'Inefficiency Ratio $\\rho(\\mathbf{z}(\\alpha))$')\n",
    "ax4.legend(['I-TAP-0.01', 'I-TAP-0.05', 'I-Solution', 'Jahn et al.'])\n",
    "ax4.set_title('Anaheim')\n",
    "ax4.set_ylim([0.995, 1.1])\n",
    "\n",
    "ax5 = fig.add_subplot(235)\n",
    "ax5.plot(final_beta_dict['PrenzlauerbergCenter'], total_cost_dict['PrenzlauerbergCenter']/total_cost_dict['PrenzlauerbergCenter'][-1])\n",
    "ax5.plot(final_beta_dict_05['PrenzlauerbergCenter'], total_cost_dict_05['PrenzlauerbergCenter']/total_cost_dict_05['PrenzlauerbergCenter'][-1])\n",
    "ax5.plot(beta_alpha_solution_dict['PrenzlauerbergCenter'], total_tt_solution_dict['PrenzlauerbergCenter']/total_tt_solution_dict['PrenzlauerbergCenter'][0])\n",
    "ax5.plot(final_beta_2005_dict['PrenzlauerbergCenter'], total_cost_2005_dict['PrenzlauerbergCenter']/total_cost_2005_dict['PrenzlauerbergCenter'][-1])\n",
    "ax5.set_xlabel('Loaded Unfairness')\n",
    "ax5.set_ylabel(r'Inefficiency Ratio $\\rho(\\mathbf{z}(\\alpha))$')\n",
    "ax5.legend(['I-TAP-0.01', 'I-TAP-0.05', 'I-Solution', 'Jahn et al.'])\n",
    "ax5.set_title('PrenzlauerbergCenter')\n",
    "ax5.set_ylim([0.995, 1.1])\n",
    "\n",
    "ax6 = fig.add_subplot(236)\n",
    "ax6.plot(final_beta_dict['Friedrichshain'], total_cost_dict['Friedrichshain']/total_cost_dict['Friedrichshain'][-1])\n",
    "ax6.plot(final_beta_dict_05['Friedrichshain'], total_cost_dict_05['Friedrichshain']/total_cost_dict_05['Friedrichshain'][-1])\n",
    "ax6.plot(beta_alpha_solution_dict['Friedrichshain'], total_tt_solution_dict['Friedrichshain']/total_tt_solution_dict['Friedrichshain'][0])\n",
    "ax6.plot(final_beta_2005_dict['Friedrichshain'], total_cost_2005_dict['Friedrichshain']/total_cost_2005_dict['Friedrichshain'][-1])\n",
    "ax6.set_xlabel('Loaded Unfairness')\n",
    "ax6.set_ylabel(r'Inefficiency Ratio $\\rho(\\mathbf{z}(\\alpha))$')\n",
    "ax6.legend(['I-TAP-0.01', 'I-TAP-0.05', 'I-Solution', 'Jahn et al.'])\n",
    "ax6.set_title('Friedrichshain')\n",
    "ax6.set_ylim([0.995, 1.1])\n",
    "\n",
    "#import tikzplotlib\n",
    "\n",
    "#tikzplotlib.save(\"pareto_solution_all_cities.tex\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Inefficiency and Unfairness vs. Convex Combination of I-TAP"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "for city_ in list_cities:\n",
    "    alpha_vals_plot = [float(i) for i in alpha_values]\n",
    "    plt.plot(alpha_vals_plot, total_cost_original_dict[city_]/total_cost_original_dict[city_][-1])\n",
    "    #plt.scatter(alpha_vals_plot, total_cost_dict[city_]/total_cost_dict[city_][-1])\n",
    "    plt.xlabel(r'Convex Combination Parameter $\\alpha$')\n",
    "    plt.ylabel('T($\\mathbf{x}$)/T($\\mathbf{x}^{SO}$)')\n",
    "plt.legend(list_cities)\n",
    "\n",
    "#import tikzplotlib\n",
    "\n",
    "#tikzplotlib.save(\"cost_v_alpha_0.01.tex\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "for city_ in list_cities:\n",
    "    alpha_vals_plot = [float(i) for i in alpha_values]\n",
    "    plt.plot(alpha_vals_plot, final_beta_original_dict[city_])\n",
    "    #plt.scatter(alpha_vals_plot, final_beta_dict[city_])\n",
    "    plt.xlabel(r'Convex Combination Parameter $\\alpha$')\n",
    "    plt.ylabel('Unfairness')\n",
    "plt.legend(list_cities)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Unfairness plot with outliers\n",
    "for city_ in list_cities:\n",
    "    if city_ != \"PrenzlauerbergCenter\":\n",
    "        P_center = final_beta_original_dict[city_]\n",
    "        actual_P_center = []\n",
    "        outlier_P_center = []\n",
    "        actual_alpha = []\n",
    "        outlier_alpha = []\n",
    "        for idx, i in enumerate(P_center):\n",
    "            if idx == 0:\n",
    "                actual_P_center.append(i)\n",
    "                actual_alpha.append(0.0)\n",
    "\n",
    "            else:\n",
    "                if (i - actual_P_center[-1])/(actual_P_center[-1])*100<=9:\n",
    "                    actual_P_center.append(i)\n",
    "                    actual_alpha.append(idx*0.01)\n",
    "                else:\n",
    "                    outlier_P_center.append(i)\n",
    "                    outlier_alpha.append(idx*0.01)\n",
    "                    \n",
    "        print(outlier_P_center)\n",
    "        print(outlier_alpha)\n",
    "\n",
    "        plt.plot(actual_alpha, actual_P_center)\n",
    "        plt.scatter(outlier_alpha, outlier_P_center)\n",
    "        \n",
    "    else:\n",
    "        alpha_vals_plot = [float(i) for i in alpha_values]\n",
    "        plt.plot(alpha_vals_plot, final_beta_original_dict[city_])\n",
    "    \n",
    "plt.xlabel(r'Convex Combination Parameter $\\alpha$')\n",
    "plt.ylabel('Unfairness')\n",
    "\n",
    "#tikzplotlib.save(\"alpha_v_beta_outliers.tex\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Distribution of Unfairness of SO solution"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "num_bins = 20\n",
    "for num_ in ['Tiergarten', 'Friedrichshain', 'Anaheim', 'Massachusetts', 'SiouxFalls', 'PrenzlauerbergCenter']:\n",
    "    counts, bin_edges = np.histogram (global_city_so[num_], bins=num_bins, normed=True)\n",
    "    cdf = np.cumsum (counts)\n",
    "    plt.plot (bin_edges[1:], cdf/cdf[-1])\n",
    "plt.legend(['Tiergarten', 'Friedrichshain', 'Anaheim', 'Massachusetts', 'SiouxFalls', 'PrenzlauerbergCenter'])\n",
    "plt.xlabel('Unfairness')\n",
    "plt.ylabel('Probability')\n",
    "plt.text(1.5, 0.9, 'matplotlib', horizontalalignment='center', verticalalignment='center')\n",
    "import tikzplotlib\n",
    "\n",
    "tikzplotlib.save(\"text_test.tex\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Implement 2005 Paper"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1.00\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/devanshjalota/anaconda3/lib/python3.7/site-packages/ipykernel_launcher.py:60: ParserWarning: Falling back to the 'python' engine because the 'c' engine does not support regex separators (separators > 1 char and different from '\\s+' are interpreted as regex); you can avoid this warning by specifying engine='python'.\n",
      "/Users/devanshjalota/anaconda3/lib/python3.7/site-packages/ipykernel_launcher.py:78: FutureWarning: arrays to stack must be passed as a \"sequence\" type such as list or tuple. Support for non-sequence iterables such as generators is deprecated as of NumPy 1.16 and will raise an error in the future.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1.05\n",
      "1.10\n",
      "1.15\n",
      "1.20\n",
      "1.25\n",
      "1.30\n",
      "1.35\n",
      "1.40\n",
      "1.45\n",
      "1.50\n",
      "1.55\n",
      "1.60\n",
      "1.65\n",
      "1.70\n",
      "1.75\n",
      "1.80\n",
      "1.85\n",
      "1.90\n",
      "1.95\n",
      "2.00\n",
      "1.00\n",
      "1.05\n",
      "1.10\n",
      "1.15\n",
      "1.20\n",
      "1.25\n",
      "1.30\n",
      "1.35\n",
      "1.40\n",
      "1.45\n",
      "1.50\n",
      "1.55\n",
      "1.60\n",
      "1.65\n",
      "1.70\n",
      "1.75\n",
      "1.80\n",
      "1.85\n",
      "1.90\n",
      "1.95\n",
      "2.00\n",
      "1.00\n",
      "1.05\n",
      "1.10\n",
      "1.15\n",
      "1.20\n",
      "1.25\n",
      "1.30\n",
      "1.35\n",
      "1.40\n",
      "1.45\n",
      "1.50\n",
      "1.55\n",
      "1.60\n",
      "1.65\n",
      "1.70\n",
      "1.75\n",
      "1.80\n",
      "1.85\n",
      "1.90\n",
      "1.95\n",
      "2.00\n",
      "1.00\n",
      "1.05\n",
      "1.10\n",
      "1.15\n",
      "1.20\n",
      "1.25\n",
      "1.30\n",
      "1.35\n",
      "1.40\n",
      "1.45\n",
      "1.50\n",
      "1.55\n",
      "1.60\n",
      "1.65\n",
      "1.70\n",
      "1.75\n",
      "1.80\n",
      "1.85\n",
      "1.90\n",
      "1.95\n",
      "2.00\n",
      "1.00\n",
      "1.05\n",
      "1.10\n",
      "1.15\n",
      "1.20\n",
      "1.25\n",
      "1.30\n",
      "1.35\n",
      "1.40\n",
      "1.45\n",
      "1.50\n",
      "1.55\n",
      "1.60\n",
      "1.65\n",
      "1.70\n",
      "1.75\n",
      "1.80\n",
      "1.85\n",
      "1.90\n",
      "1.95\n",
      "2.00\n",
      "1.00\n",
      "1.05\n",
      "1.10\n",
      "1.15\n",
      "1.20\n",
      "1.25\n",
      "1.30\n",
      "1.35\n",
      "1.40\n",
      "1.45\n",
      "1.50\n",
      "1.55\n",
      "1.60\n",
      "1.65\n",
      "1.70\n",
      "1.75\n",
      "1.80\n",
      "1.85\n",
      "1.90\n",
      "1.95\n",
      "2.00\n"
     ]
    }
   ],
   "source": [
    "alpha_values_2005 = ['1.00', '1.05', '1.10', '1.15', '1.20', '1.25', '1.30', '1.35', '1.40', '1.45', '1.50',\n",
    "               '1.55', '1.60', '1.65', '1.70', '1.75', '1.80', '1.85', '1.90', '1.95', '2.00']\n",
    "\n",
    "final_beta_2005_dict = {}\n",
    "percentile_beta_2005_dict = {}\n",
    "total_cost_2005_dict = {}\n",
    "\n",
    "for city_name in list_cities:\n",
    "\n",
    "    main_zip = 'Alpha_Objective/' + city_name + '/' + city_name + '-'\n",
    "    main_zip_loc = 'Alpha_Objective/' + city_name + '/'\n",
    "    edges_file = 'Locations/' + city_name + '/edges.csv'\n",
    "    new_folder = 'Alpha_Objective'\n",
    "    specific_city = city_name + '.zip'\n",
    "    od_file = 'Locations/' + city_name + '/od.csv'\n",
    "    loc_ = 'constrained_approach/' + city_name + '/' + city_name +  '-constrained-'\n",
    "\n",
    "    #Edges Data\n",
    "    edges = pd.read_csv(edges_file)\n",
    "    edges_arr = np.array(edges)\n",
    "    edges_arr = np.c_[edges_arr, np.array(range(len(edges)))]\n",
    "\n",
    "    OD_mat = pd.read_csv(od_file)\n",
    "    OD_arr__ = OD_mat['volume'].values\n",
    "\n",
    "    total_cost_2005 = []\n",
    "    final_beta_2005 = []\n",
    "    percentile_beta_2005 = []\n",
    "    for alpha_val in alpha_values_2005:\n",
    "        print(alpha_val)\n",
    "\n",
    "        df_flow = pd.read_csv(loc_+alpha_val+'/flow.csv', skiprows = 1)\n",
    "        actual_cost = np.array(df_flow['actualCost'])\n",
    "        flow = np.array(df_flow['flow'])\n",
    "        total_cost_2005.append(sum([actual_cost[i]*flow[i] for i in range(len(actual_cost))]))\n",
    "\n",
    "        flow_arr = np.array(df_flow)\n",
    "\n",
    "        def find_edge2(tail_, head_):\n",
    "            '''Finds edge index for given edge'''\n",
    "\n",
    "            edges_filtered = edges_arr[edges_arr[:, 0] == tail_]\n",
    "            edges_filtered = edges_filtered[edges_filtered[:, 1] == head_]\n",
    "\n",
    "            return edges_filtered[0, -1]\n",
    "\n",
    "        #Update Flow data\n",
    "        edge_num_arr = []\n",
    "        for j in df_flow.index:\n",
    "            tail_value = int(flow_arr[j, 1])\n",
    "            head_value = int(flow_arr[j, 2])\n",
    "            edge_num_arr.append(find_edge2(tail_value, head_value))\n",
    "\n",
    "        flow_arr = np.c_[flow_arr, edge_num_arr]\n",
    "        flow_arr = flow_arr[flow_arr[:,-1].argsort()]\n",
    "\n",
    "        cost_sol = flow_arr[:, 4]\n",
    "        cost_sol = np.array([float(i) for i in cost_sol])\n",
    "\n",
    "        paths_df = pd.read_csv(loc_+alpha_val+'/paths.csv', sep='delimiter', header=None)\n",
    "        paths_df = paths_df.iloc[2:]\n",
    "        paths_df = paths_df[0].str.split(',', 2, expand = True)\n",
    "        paths_arr = np.array(paths_df)\n",
    "\n",
    "        weights_df = pd.read_csv(loc_+alpha_val+'/weights.csv', skiprows = 1)\n",
    "        weights_df_arr = np.array(weights_df)\n",
    "\n",
    "        #Check if weight is at least 1/10th of the maximum weight\n",
    "        small_arr = []\n",
    "        for i in range(len(weights_df_arr)):\n",
    "            if weights_df_arr[i, 1] > max(weights_df_arr[:, 1])/10:\n",
    "                small_arr.append(i)\n",
    "\n",
    "        paths_arr[:, 0] = [int(i) for i in paths_arr[:, 0]]\n",
    "        #paths_arr_ue = np.append(paths_arr_ue, np.array(weig), axis=1)\n",
    "        paths_arr = paths_arr[paths_arr[:, 0]>=min(small_arr)]\n",
    "        paths_arr_new = paths_arr[:, 1:]\n",
    "        paths_arr_new = np.vstack({tuple(row) for row in paths_arr_new})\n",
    "\n",
    "        beta_val = []\n",
    "        for OD_pair in range(int(paths_arr[-1, 1])):\n",
    "            OD_arr = paths_arr_new[paths_arr_new[:, 0] == str(OD_pair)]\n",
    "            all_paths_OD = []\n",
    "            OD_tt_paths = []\n",
    "            for path_idx, path_val in enumerate(OD_arr[:, 1]):\n",
    "                all_edges = path_val.split(',')\n",
    "                all_edges = [int(i) for i in all_edges]\n",
    "                list_edges = []\n",
    "                path_tt = 0\n",
    "                for edge_values in all_edges:\n",
    "                    list_edges.append(edge_values)\n",
    "                    path_tt += cost_sol[edge_values]\n",
    "                OD_tt_paths.append(path_tt)\n",
    "\n",
    "            #Store max and min paths per OD pair\n",
    "            path_OD_max = max(OD_tt_paths)\n",
    "            path_OD_min = min(OD_tt_paths)\n",
    "\n",
    "            #Find ratio of max and min\n",
    "            if path_OD_max-path_OD_min>0.001:\n",
    "                path_OD_beta = path_OD_max/path_OD_min\n",
    "            else:\n",
    "                path_OD_beta = 1\n",
    "\n",
    "            beta_val.append(path_OD_beta)\n",
    "\n",
    "        #Find percentile value of beta for this value of alpha\n",
    "        beta_new_val = [item for item, count in zip(beta_val, OD_arr__) for i in range(count)]\n",
    "        beta_dist = np.percentile(beta_new_val, percentile_val)\n",
    "\n",
    "        #Find maximum value of beta for this value of alpha\n",
    "        beta = max(beta_val) \n",
    "        final_beta_2005.append(beta)\n",
    "        percentile_beta_2005.append(beta_dist)\n",
    "        \n",
    "    final_beta_2005 = np.array(final_beta_2005)\n",
    "    final_beta_plot = [final_beta_2005[0]]\n",
    "    total_cost_plot = [total_cost_2005[0]]\n",
    "    for i in range(1, len(alpha_values_2005)):\n",
    "        restricted_beta = final_beta_2005[final_beta_2005<final_beta_2005[i]]\n",
    "        if len(restricted_beta)>1:\n",
    "            idx_val_arr = []\n",
    "            total_cost_arr = []\n",
    "            for j in range(len(restricted_beta)):\n",
    "                idx_val_arr.append(list(final_beta_2005).index(restricted_beta[j]))\n",
    "                total_cost_arr.append(total_cost_2005[idx_val_arr[-1]])\n",
    "\n",
    "            if min(total_cost_arr)>total_cost_2005[i]:\n",
    "                total_cost_plot.append(total_cost_2005[i])\n",
    "                final_beta_plot.append(final_beta_2005[i])\n",
    "                \n",
    "        else:\n",
    "            total_cost_plot.append(total_cost_2005[i])\n",
    "            final_beta_plot.append(final_beta_2005[i])\n",
    "        \n",
    "    total_cost_2005_dict[city_name] = total_cost_plot\n",
    "    final_beta_2005_dict[city_name] = final_beta_plot\n",
    "    percentile_beta_2005_dict[city_name] = percentile_beta_2005"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# I-TAP 0.01 Step size"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/devanshjalota/anaconda3/lib/python3.7/site-packages/ipykernel_launcher.py:70: ParserWarning: Falling back to the 'python' engine because the 'c' engine does not support regex separators (separators > 1 char and different from '\\s+' are interpreted as regex); you can avoid this warning by specifying engine='python'.\n",
      "/Users/devanshjalota/anaconda3/lib/python3.7/site-packages/ipykernel_launcher.py:88: FutureWarning: arrays to stack must be passed as a \"sequence\" type such as list or tuple. Support for non-sequence iterables such as generators is deprecated as of NumPy 1.16 and will raise an error in the future.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "941\n",
      ".01\n",
      "870\n",
      ".02\n",
      "886\n",
      ".03\n",
      "809\n",
      ".04\n",
      "889\n",
      ".05\n",
      "886\n",
      "23,190,439,607,60,359,10,436,505,504,501,498,4,456,460,49,465\n",
      "['23,190,439,607,60,359,10,436,505,504,501,498,4,456,460,49,465'\n",
      " '23,190,439,607,60,359,10,436,505,504,501,498,5,472,78,488,482']\n",
      ".06\n",
      "886\n",
      ".07\n",
      "806\n",
      ".08\n",
      "885\n",
      ".09\n",
      "885\n",
      ".10\n",
      "889\n",
      ".11\n",
      "884\n",
      ".12\n",
      "889\n",
      ".13\n",
      "877\n",
      ".14\n",
      "885\n",
      ".15\n",
      "894\n",
      ".16\n",
      "878\n",
      ".17\n",
      "891\n",
      ".18\n",
      "895\n",
      ".19\n",
      "899\n",
      ".20\n",
      "892\n",
      ".21\n",
      "892\n",
      ".22\n",
      "902\n",
      ".23\n",
      "894\n",
      ".24\n",
      "891\n",
      ".25\n",
      "902\n",
      ".26\n",
      "892\n",
      ".27\n",
      "880\n",
      ".28\n",
      "892\n",
      ".29\n",
      "886\n",
      ".30\n",
      "894\n",
      ".31\n",
      "895\n",
      ".32\n",
      "884\n",
      ".33\n",
      "890\n",
      ".34\n",
      "897\n",
      ".35\n",
      "892\n",
      ".36\n",
      "901\n",
      ".37\n",
      "903\n",
      ".38\n",
      "889\n",
      ".39\n",
      "894\n",
      ".40\n",
      "899\n",
      ".41\n",
      "896\n",
      ".42\n",
      "817\n",
      ".43\n",
      "895\n",
      ".44\n",
      "889\n",
      ".45\n",
      "901\n",
      ".46\n",
      "901\n",
      ".47\n",
      "861\n",
      ".48\n",
      "893\n",
      ".49\n",
      "890\n",
      ".50\n",
      "890\n",
      ".51\n",
      "777\n",
      ".52\n",
      "901\n",
      ".53\n",
      "867\n",
      ".54\n",
      "894\n",
      ".55\n",
      "892\n",
      ".56\n",
      "897\n",
      ".57\n",
      "900\n",
      ".58\n",
      "890\n",
      ".59\n",
      "884\n",
      ".60\n",
      "884\n",
      ".61\n",
      "887\n",
      ".62\n",
      "893\n",
      ".63\n",
      "901\n",
      ".64\n",
      "893\n",
      ".65\n",
      "907\n",
      ".66\n",
      "897\n",
      ".67\n",
      "901\n",
      ".68\n",
      "885\n",
      ".69\n",
      "893\n",
      ".70\n",
      "896\n",
      ".71\n",
      "901\n",
      ".72\n",
      "885\n",
      ".73\n",
      "899\n",
      ".74\n",
      "876\n",
      ".75\n",
      "900\n",
      ".76\n",
      "890\n",
      ".77\n",
      "883\n",
      ".78\n",
      "901\n",
      ".79\n",
      "899\n",
      ".80\n",
      "897\n",
      ".81\n",
      "895\n",
      ".82\n",
      "885\n",
      ".83\n",
      "904\n",
      ".84\n",
      "869\n",
      ".85\n",
      "896\n",
      ".86\n",
      "895\n",
      ".87\n",
      "889\n",
      ".88\n",
      "895\n",
      ".89\n",
      "872\n",
      ".90\n",
      "890\n",
      ".91\n",
      "867\n",
      ".92\n",
      "887\n",
      ".93\n",
      "879\n",
      ".94\n",
      "862\n",
      ".95\n",
      "876\n",
      ".96\n",
      "877\n",
      ".97\n",
      "926\n",
      ".98\n",
      "928\n",
      ".99\n",
      "875\n",
      "1.00\n",
      "873\n",
      "0\n",
      "763\n",
      ".01\n",
      "721\n",
      ".02\n",
      "714\n",
      ".03\n",
      "730\n",
      ".04\n",
      "747\n",
      ".05\n",
      "775\n",
      "26,482,83,498,190,194,248,246,66,391,0,109,6,123,120,106\n",
      "['26,482,83,498,190,194,248,246,66,391,0,109,6,123,120,106']\n",
      ".06\n",
      "701\n",
      ".07\n",
      "707\n",
      ".08\n",
      "793\n",
      ".09\n",
      "720\n",
      ".10\n",
      "779\n",
      ".11\n",
      "707\n",
      ".12\n",
      "755\n",
      ".13\n",
      "722\n",
      ".14\n",
      "724\n",
      ".15\n",
      "760\n",
      ".16\n",
      "736\n",
      ".17\n",
      "748\n",
      ".18\n",
      "717\n",
      ".19\n",
      "676\n",
      ".20\n",
      "690\n",
      ".21\n",
      "770\n",
      ".22\n",
      "704\n",
      ".23\n",
      "676\n",
      ".24\n",
      "714\n",
      ".25\n",
      "749\n",
      ".26\n",
      "732\n",
      ".27\n",
      "766\n",
      ".28\n",
      "764\n",
      ".29\n",
      "734\n",
      ".30\n",
      "723\n",
      ".31\n",
      "710\n",
      ".32\n",
      "766\n",
      ".33\n",
      "746\n",
      ".34\n",
      "696\n",
      ".35\n",
      "713\n",
      ".36\n",
      "773\n",
      ".37\n",
      "730\n",
      ".38\n",
      "778\n",
      ".39\n",
      "781\n",
      ".40\n",
      "782\n",
      ".41\n",
      "796\n",
      ".42\n",
      "704\n",
      ".43\n",
      "795\n",
      ".44\n",
      "730\n",
      ".45\n",
      "728\n",
      ".46\n",
      "781\n",
      ".47\n",
      "751\n",
      ".48\n",
      "779\n",
      ".49\n",
      "723\n",
      ".50\n",
      "803\n",
      ".51\n",
      "790\n",
      ".52\n",
      "795\n",
      ".53\n",
      "792\n",
      ".54\n",
      "798\n",
      ".55\n",
      "795\n",
      ".56\n",
      "795\n",
      ".57\n",
      "798\n",
      ".58\n",
      "798\n",
      ".59\n",
      "778\n",
      ".60\n",
      "682\n",
      ".61\n",
      "659\n",
      ".62\n",
      "777\n",
      ".63\n",
      "798\n",
      ".64\n",
      "735\n",
      ".65\n",
      "725\n",
      ".66\n",
      "785\n",
      ".67\n",
      "786\n",
      ".68\n",
      "776\n",
      ".69\n",
      "779\n",
      ".70\n",
      "763\n",
      ".71\n",
      "713\n",
      ".72\n",
      "798\n",
      ".73\n",
      "762\n",
      ".74\n",
      "792\n",
      ".75\n",
      "778\n",
      ".76\n",
      "696\n",
      ".77\n",
      "809\n",
      ".78\n",
      "724\n",
      ".79\n",
      "784\n",
      ".80\n",
      "799\n",
      ".81\n",
      "789\n",
      ".82\n",
      "786\n",
      ".83\n",
      "778\n",
      ".84\n",
      "769\n",
      ".85\n",
      "601\n",
      ".86\n",
      "775\n",
      ".87\n",
      "750\n",
      ".88\n",
      "768\n",
      ".89\n",
      "778\n",
      ".90\n",
      "775\n",
      ".91\n",
      "780\n",
      ".92\n",
      "769\n",
      ".93\n",
      "728\n",
      ".94\n",
      "757\n",
      ".95\n",
      "761\n",
      ".96\n",
      "767\n",
      ".97\n",
      "723\n",
      ".98\n",
      "777\n",
      ".99\n",
      "762\n",
      "1.00\n",
      "762\n",
      "0\n",
      "2166\n",
      ".01\n",
      "1975\n",
      ".02\n",
      "2021\n",
      ".03\n",
      "2070\n",
      ".04\n",
      "2091\n",
      ".05\n",
      "2098\n",
      "4,181,182,184,185,186,188,189,191,192,194,195,196,198,199,201,202,203,205,206,98,159,160,162,163,165,166,168,169,171,172,175,176,177,179,180\n",
      "['4,181,182,184,185,186,188,189,191,192,194,195,196,198,199,201,202,203,205,206,98,159,160,162,163,165,166,168,169,171,172,175,176,177,179,180']\n",
      ".06\n",
      "1990\n",
      ".07\n",
      "2127\n",
      ".08\n",
      "1966\n",
      ".09\n",
      "2068\n",
      ".10\n",
      "2074\n",
      ".11\n",
      "2057\n",
      ".12\n",
      "2066\n",
      ".13\n",
      "2027\n",
      ".14\n",
      "2106\n",
      ".15\n",
      "1990\n",
      ".16\n",
      "2039\n",
      ".17\n",
      "2060\n",
      ".18\n",
      "2058\n",
      ".19\n",
      "1685\n",
      ".20\n",
      "2042\n",
      ".21\n",
      "2156\n",
      ".22\n",
      "1988\n",
      ".23\n",
      "2018\n",
      ".24\n",
      "2053\n",
      ".25\n",
      "2017\n",
      ".26\n",
      "2002\n",
      ".27\n",
      "2030\n",
      ".28\n",
      "2020\n",
      ".29\n",
      "2013\n",
      ".30\n",
      "2174\n",
      ".31\n",
      "2156\n",
      ".32\n",
      "2116\n",
      ".33\n",
      "2029\n",
      ".34\n",
      "2123\n",
      ".35\n",
      "1978\n",
      ".36\n",
      "2047\n",
      ".37\n",
      "2073\n",
      ".38\n",
      "2099\n",
      ".39\n",
      "2063\n",
      ".40\n",
      "2090\n",
      ".41\n",
      "2151\n",
      ".42\n",
      "2073\n",
      ".43\n",
      "2079\n",
      ".44\n",
      "2060\n",
      ".45\n",
      "2074\n",
      ".46\n",
      "2136\n",
      ".47\n",
      "2093\n",
      ".48\n",
      "2204\n",
      ".49\n",
      "2138\n",
      ".50\n",
      "2072\n",
      ".51\n",
      "2115\n",
      ".52\n",
      "2077\n",
      ".53\n",
      "2074\n",
      ".54\n",
      "2072\n",
      ".55\n",
      "2092\n",
      ".56\n",
      "2109\n",
      ".57\n",
      "2057\n",
      ".58\n",
      "2097\n",
      ".59\n",
      "2123\n",
      ".60\n",
      "2133\n",
      ".61\n",
      "2146\n",
      ".62\n",
      "2129\n",
      ".63\n",
      "2140\n",
      ".64\n",
      "2214\n",
      ".65\n",
      "2140\n",
      ".66\n",
      "2154\n",
      ".67\n",
      "2229\n",
      ".68\n",
      "2099\n",
      ".69\n",
      "2173\n",
      ".70\n",
      "2177\n",
      ".71\n",
      "2101\n",
      ".72\n",
      "2115\n",
      ".73\n",
      "2143\n",
      ".74\n",
      "2173\n",
      ".75\n",
      "2140\n",
      ".76\n",
      "2143\n",
      ".77\n",
      "2261\n",
      ".78\n",
      "2128\n",
      ".79\n",
      "2146\n",
      ".80\n",
      "2166\n",
      ".81\n",
      "2124\n",
      ".82\n",
      "2123\n",
      ".83\n",
      "2149\n",
      ".84\n",
      "2108\n",
      ".85\n",
      "2120\n",
      ".86\n",
      "2157\n",
      ".87\n",
      "2158\n",
      ".88\n",
      "2085\n",
      ".89\n",
      "2118\n",
      ".90\n",
      "2036\n",
      ".91\n",
      "2102\n",
      ".92\n",
      "2159\n",
      ".93\n",
      "2143\n",
      ".94\n",
      "2088\n",
      ".95\n",
      "2172\n",
      ".96\n",
      "2119\n",
      ".97\n",
      "2092\n",
      ".98\n",
      "2089\n",
      ".99\n",
      "2000\n",
      "1.00\n",
      "2143\n",
      "0\n",
      "1383\n",
      ".01\n",
      "1465\n",
      ".02\n",
      "1471\n",
      ".03\n",
      "1591\n",
      ".04\n",
      "1568\n",
      ".05\n",
      "1273\n",
      "45,74,69,82,87,119,116,222\n",
      "['45,74,69,82,87,120,121,116,222' '45,74,69,82,87,119,116,222']\n",
      ".06\n",
      "1560\n",
      ".07\n",
      "1510\n",
      ".08\n",
      "1544\n",
      ".09\n",
      "1504\n",
      ".10\n",
      "1520\n",
      ".11\n",
      "1551\n",
      ".12\n",
      "1601\n",
      ".13\n",
      "1762\n",
      ".14\n",
      "1695\n",
      ".15\n",
      "1779\n",
      ".16\n",
      "1745\n",
      ".17\n",
      "1744\n",
      ".18\n",
      "1753\n",
      ".19\n",
      "1656\n",
      ".20\n",
      "1634\n",
      ".21\n",
      "1725\n",
      ".22\n",
      "1860\n",
      ".23\n",
      "1760\n",
      ".24\n",
      "1637\n",
      ".25\n",
      "1881\n",
      ".26\n",
      "1898\n",
      ".27\n",
      "1916\n",
      ".28\n",
      "1966\n",
      ".29\n",
      "1831\n",
      ".30\n",
      "1894\n",
      ".31\n",
      "1910\n",
      ".32\n",
      "1898\n",
      ".33\n",
      "1988\n",
      ".34\n",
      "1921\n",
      ".35\n",
      "1950\n",
      ".36\n",
      "2005\n",
      ".37\n",
      "2042\n",
      ".38\n",
      "2056\n",
      ".39\n",
      "1786\n",
      ".40\n",
      "1952\n",
      ".41\n",
      "1936\n",
      ".42\n",
      "2011\n",
      ".43\n",
      "2003\n",
      ".44\n",
      "1957\n",
      ".45\n",
      "1941\n",
      ".46\n",
      "1952\n",
      ".47\n",
      "1792\n",
      ".48\n",
      "1961\n",
      ".49\n",
      "2062\n",
      ".50\n",
      "1927\n",
      ".51\n",
      "1963\n",
      ".52\n",
      "2163\n",
      ".53\n",
      "1907\n",
      ".54\n",
      "2031\n",
      ".55\n",
      "1711\n",
      ".56\n",
      "1786\n",
      ".57\n",
      "1884\n",
      ".58\n",
      "1764\n",
      ".59\n",
      "1909\n",
      ".60\n",
      "1838\n",
      ".61\n",
      "1975\n",
      ".62\n",
      "1857\n",
      ".63\n",
      "1981\n",
      ".64\n",
      "1439\n",
      ".65\n",
      "1814\n",
      ".66\n",
      "1349\n",
      ".67\n",
      "1988\n",
      ".68\n",
      "1765\n",
      ".69\n",
      "1984\n",
      ".70\n",
      "2013\n",
      ".71\n",
      "2000\n",
      ".72\n",
      "1990\n",
      ".73\n",
      "1936\n",
      ".74\n",
      "1966\n",
      ".75\n",
      "1962\n",
      ".76\n",
      "1838\n",
      ".77\n",
      "1888\n",
      ".78\n",
      "1748\n",
      ".79\n",
      "1853\n",
      ".80\n",
      "1879\n",
      ".81\n",
      "1527\n",
      ".82\n",
      "1846\n",
      ".83\n",
      "1867\n",
      ".84\n",
      "1762\n",
      ".85\n",
      "1760\n",
      ".86\n",
      "1838\n",
      ".87\n",
      "1914\n",
      ".88\n",
      "1846\n",
      ".89\n",
      "1556\n",
      ".90\n",
      "1844\n",
      ".91\n",
      "1867\n",
      ".92\n",
      "1900\n",
      ".93\n",
      "1851\n",
      ".94\n",
      "1865\n",
      ".95\n",
      "1822\n",
      ".96\n",
      "1813\n",
      ".97\n",
      "1879\n",
      ".98\n",
      "1968\n",
      ".99\n",
      "1808\n",
      "1.00\n",
      "1845\n",
      "[1.03423045 1.02571244 1.0252215  1.02340533 1.02260234 1.02175922\n",
      " 1.02136926 1.02092628 1.01985855 1.01939586 1.01830726 1.01777432\n",
      " 1.01717943 1.01602165 1.01527929 1.0146632  1.01573469 1.0139838\n",
      " 1.01316806 1.0122094  1.01093863 1.01085181 1.00995505 1.00967638\n",
      " 1.0056335  1.00397658 1.00378626 1.00366953 1.00278478 1.0008531\n",
      " 1.00033734 1.00002869 1.        ]\n",
      "[1.0102572793435023, 1.0615867560402865, 1.081858407079646, 1.1065518616397443, 1.118987069986265, 1.134903040020421, 1.1396564600448094, 1.1453578595317726, 1.1590069152232771, 1.1638181476733647, 1.1753132627482024, 1.1847486483568503, 1.1909413787634702, 1.1999217953363726, 1.2161420469521889, 1.2206335222204288, 1.2161405325569354, 1.2371398976253571, 1.2424706465153872, 1.2615549921207159, 1.2644645210700671, 1.2673156126640708, 1.2760041750647855, 1.2824949398200018, 1.3241405760504281, 1.364256522799317, 1.3658437817358018, 1.3677797216466632, 1.3994343640007871, 1.4377449472493988, 1.4402670622573346, 1.491295607476429, 1.4974377137925972]\n",
      "0\n",
      "755\n",
      ".01\n",
      "777\n",
      ".02\n",
      "767\n",
      ".03\n",
      "764\n",
      ".04\n",
      "776\n",
      ".05\n",
      "793\n",
      "17,55,62,69\n",
      "['17,55,62,69']\n",
      ".06\n",
      "786\n",
      ".07\n",
      "768\n",
      ".08\n",
      "807\n",
      ".09\n",
      "771\n",
      ".10\n",
      "888\n",
      ".11\n",
      "807\n",
      ".12\n",
      "792\n",
      ".13\n",
      "810\n",
      ".14\n",
      "951\n",
      ".15\n",
      "809\n",
      ".16\n",
      "823\n",
      ".17\n",
      "799\n",
      ".18\n",
      "829\n",
      ".19\n",
      "807\n",
      ".20\n",
      "806\n",
      ".21\n",
      "812\n",
      ".22\n",
      "835\n",
      ".23\n",
      "844\n",
      ".24\n",
      "895\n",
      ".25\n",
      "767\n",
      ".26\n",
      "907\n",
      ".27\n",
      "843\n",
      ".28\n",
      "830\n",
      ".29\n",
      "814\n",
      ".30\n",
      "814\n",
      ".31\n",
      "943\n",
      ".32\n",
      "848\n",
      ".33\n",
      "850\n",
      ".34\n",
      "865\n",
      ".35\n",
      "886\n",
      ".36\n",
      "815\n",
      ".37\n",
      "810\n",
      ".38\n",
      "859\n",
      ".39\n",
      "823\n",
      ".40\n",
      "854\n",
      ".41\n",
      "886\n",
      ".42\n",
      "844\n",
      ".43\n",
      "907\n",
      ".44\n",
      "902\n",
      ".45\n",
      "884\n",
      ".46\n",
      "852\n",
      ".47\n",
      "889\n",
      ".48\n",
      "905\n",
      ".49\n",
      "830\n",
      ".50\n",
      "894\n",
      ".51\n",
      "886\n",
      ".52\n",
      "848\n",
      ".53\n",
      "845\n",
      ".54\n",
      "888\n",
      ".55\n",
      "907\n",
      ".56\n",
      "841\n",
      ".57\n",
      "854\n",
      ".58\n",
      "845\n",
      ".59\n",
      "917\n",
      ".60\n",
      "876\n",
      ".61\n",
      "897\n",
      ".62\n",
      "894\n",
      ".63\n",
      "938\n",
      ".64\n",
      "851\n",
      ".65\n",
      "866\n",
      ".66\n",
      "949\n",
      ".67\n",
      "847\n",
      ".68\n",
      "869\n",
      ".69\n",
      "842\n",
      ".70\n",
      "833\n",
      ".71\n",
      "863\n",
      ".72\n",
      "813\n",
      ".73\n",
      "848\n",
      ".74\n",
      "943\n",
      ".75\n",
      "886\n",
      ".76\n",
      "885\n",
      ".77\n",
      "925\n",
      ".78\n",
      "842\n",
      ".79\n",
      "927\n",
      ".80\n",
      "880\n",
      ".81\n",
      "895\n",
      ".82\n",
      "935\n",
      ".83\n",
      "844\n",
      ".84\n",
      "879\n",
      ".85\n",
      "852\n",
      ".86\n",
      "811\n",
      ".87\n",
      "846\n",
      ".88\n",
      "952\n",
      ".89\n",
      "877\n",
      ".90\n",
      "951\n",
      ".91\n",
      "833\n",
      ".92\n",
      "827\n",
      ".93\n",
      "919\n",
      ".94\n",
      "943\n",
      ".95\n",
      "855\n",
      ".96\n",
      "841\n",
      ".97\n",
      "926\n",
      ".98\n",
      "892\n",
      ".99\n",
      "939\n",
      "1.00\n",
      "885\n",
      "0\n",
      "2007\n",
      ".01\n",
      "2058\n",
      ".02\n",
      "2335\n",
      ".03\n",
      "2076\n",
      ".04\n",
      "2325\n",
      ".05\n",
      "2467\n",
      "18,449,452,474,702,453\n",
      "['18,449,452,474,702,453']\n",
      ".06\n",
      "2352\n",
      ".07\n",
      "2391\n",
      ".08\n",
      "2319\n",
      ".09\n",
      "2499\n",
      ".10\n",
      "2541\n",
      ".11\n",
      "2553\n",
      ".12\n",
      "2634\n",
      ".13\n",
      "2560\n",
      ".14\n",
      "2449\n",
      ".15\n",
      "2562\n",
      ".16\n",
      "2574\n",
      ".17\n",
      "2793\n",
      ".18\n",
      "2567\n",
      ".19\n",
      "2472\n",
      ".20\n",
      "2557\n",
      ".21\n",
      "2468\n",
      ".22\n",
      "2546\n",
      ".23\n",
      "2467\n",
      ".24\n",
      "2538\n",
      ".25\n",
      "2559\n",
      ".26\n",
      "2468\n",
      ".27\n",
      "2552\n",
      ".28\n",
      "2463\n",
      ".29\n",
      "2464\n",
      ".30\n",
      "2555\n",
      ".31\n",
      "2520\n",
      ".32\n",
      "2597\n",
      ".33\n",
      "2628\n",
      ".34\n",
      "2431\n",
      ".35\n",
      "2603\n",
      ".36\n",
      "2466\n",
      ".37\n",
      "2632\n",
      ".38\n",
      "2670\n",
      ".39\n",
      "2073\n",
      ".40\n",
      "2616\n",
      ".41\n",
      "2608\n",
      ".42\n",
      "2797\n",
      ".43\n",
      "2563\n",
      ".44\n",
      "2435\n",
      ".45\n",
      "2873\n",
      ".46\n",
      "2771\n",
      ".47\n",
      "2719\n",
      ".48\n",
      "2417\n",
      ".49\n",
      "2615\n",
      ".50\n",
      "2610\n",
      ".51\n",
      "2652\n",
      ".52\n",
      "2673\n",
      ".53\n",
      "2751\n",
      ".54\n",
      "2761\n",
      ".55\n",
      "2677\n",
      ".56\n",
      "2745\n",
      ".57\n",
      "2812\n",
      ".58\n",
      "2568\n",
      ".59\n",
      "2516\n",
      ".60\n",
      "2583\n",
      ".61\n",
      "2683\n",
      ".62\n",
      "2765\n",
      ".63\n",
      "2749\n",
      ".64\n",
      "2653\n",
      ".65\n",
      "2769\n",
      ".66\n",
      "2527\n",
      ".67\n",
      "2228\n",
      ".68\n",
      "2731\n",
      ".69\n",
      "2730\n",
      ".70\n",
      "2899\n",
      ".71\n",
      "2115\n",
      ".72\n",
      "2797\n",
      ".73\n",
      "2694\n",
      ".74\n",
      "2830\n",
      ".75\n",
      "2918\n",
      ".76\n",
      "2866\n",
      ".77\n",
      "2876\n",
      ".78\n",
      "2642\n",
      ".79\n",
      "2883\n",
      ".80\n",
      "2945\n",
      ".81\n",
      "2650\n",
      ".82\n",
      "2995\n",
      ".83\n",
      "3018\n",
      ".84\n",
      "2940\n",
      ".85\n",
      "2809\n",
      ".86\n",
      "2845\n",
      ".87\n",
      "2852\n",
      ".88\n",
      "2871\n",
      ".89\n",
      "2970\n",
      ".90\n",
      "3085\n",
      ".91\n",
      "2928\n",
      ".92\n",
      "2840\n",
      ".93\n",
      "3003\n",
      ".94\n",
      "2958\n",
      ".95\n",
      "2885\n",
      ".96\n",
      "2911\n",
      ".97\n",
      "2997\n",
      ".98\n",
      "2746\n",
      ".99\n",
      "2955\n",
      "1.00\n",
      "2911\n"
     ]
    }
   ],
   "source": [
    "alpha_values = []\n",
    "for i in range(100):\n",
    "    if i<10:\n",
    "        alpha_values.append('.0'+str(i))\n",
    "    else:\n",
    "        alpha_values.append('.'+str(i))\n",
    "alpha_values[0] = '0'\n",
    "alpha_values.append('1.00')\n",
    "\n",
    "final_beta_dict = {}\n",
    "percentile_beta_dict = {}\n",
    "total_cost_dict = {}\n",
    "total_cost_original_dict = {}\n",
    "final_beta_original_dict = {}\n",
    "\n",
    "for city_name in list_cities:\n",
    "    edges_file = 'Locations/' + city_name + '/edges.csv'\n",
    "    percentile_val = 98\n",
    "    od_file = 'Locations/' + city_name + '/od.csv'\n",
    "    main_zip = 'alpha_0.01_increments_I-TAP/' + city_name + '-'\n",
    "    #Edges Data\n",
    "    edges = pd.read_csv(edges_file)\n",
    "    edges_arr = np.array(edges)\n",
    "    edges_arr = np.c_[edges_arr, np.array(range(len(edges)))]\n",
    "\n",
    "    OD_mat = pd.read_csv(od_file)\n",
    "    OD_arr__ = OD_mat['volume'].values\n",
    "\n",
    "    total_cost = []\n",
    "    final_beta = []\n",
    "    percentile_beta = []\n",
    "    total_tt_solution2 = []\n",
    "    path_max_total = {}\n",
    "    path_min_total = {}\n",
    "    paths_total_save = {}\n",
    "    for alpha_val in alpha_values:\n",
    "        print(alpha_val)\n",
    "        #with zipfile.ZipFile(main_zip+alpha_val+'.zip', 'r') as zip_ref:\n",
    "        #    zip_ref.extractall(main_zip_loc)\n",
    "\n",
    "        df_flow = pd.read_csv(main_zip+alpha_val+'/flow.csv', skiprows = 1)\n",
    "        actual_cost = np.array(df_flow['actualCost'])\n",
    "        flow = np.array(df_flow['flow'])\n",
    "        total_cost.append(sum([actual_cost[i]*flow[i] for i in range(len(actual_cost))]))\n",
    "\n",
    "\n",
    "        flow_arr = np.array(df_flow)\n",
    "\n",
    "        def find_edge2(tail_, head_):\n",
    "            '''Finds edge index for given edge'''\n",
    "\n",
    "            edges_filtered = edges_arr[edges_arr[:, 0] == tail_]\n",
    "            edges_filtered = edges_filtered[edges_filtered[:, 1] == head_]\n",
    "\n",
    "            return edges_filtered[0, -1]\n",
    "\n",
    "        #Update Flow data\n",
    "        edge_num_arr = []\n",
    "        for j in df_flow.index:\n",
    "            tail_value = int(flow_arr[j, 1])\n",
    "            head_value = int(flow_arr[j, 2])\n",
    "            edge_num_arr.append(find_edge2(tail_value, head_value))\n",
    "\n",
    "        flow_arr = np.c_[flow_arr, edge_num_arr]\n",
    "        flow_arr = flow_arr[flow_arr[:,-1].argsort()]\n",
    "\n",
    "        cost_sol = flow_arr[:, 4]\n",
    "        cost_sol = np.array([float(i) for i in cost_sol])\n",
    "\n",
    "        paths_df = pd.read_csv(main_zip+alpha_val+'/paths.csv', sep='delimiter', header=None)\n",
    "        paths_df = paths_df.iloc[2:]\n",
    "        paths_df = paths_df[0].str.split(',', 2, expand = True)\n",
    "        paths_arr = np.array(paths_df)\n",
    "\n",
    "        weights_df = pd.read_csv(main_zip+alpha_val+'/weights.csv', skiprows = 1)\n",
    "        weights_df_arr = np.array(weights_df)\n",
    "\n",
    "        #Check if weight is at least 1/10th of the maximum weight\n",
    "        small_arr = []\n",
    "        for i in range(len(weights_df_arr)):\n",
    "            if weights_df_arr[i, 1] > max(weights_df_arr[:, 1])/10:\n",
    "                small_arr.append(i)\n",
    "\n",
    "        paths_arr[:, 0] = [int(i) for i in paths_arr[:, 0]]\n",
    "        #paths_arr_ue = np.append(paths_arr_ue, np.array(weig), axis=1)\n",
    "        paths_arr = paths_arr[paths_arr[:, 0]>=min(small_arr)]\n",
    "        paths_arr_new = paths_arr[:, 1:]\n",
    "        paths_arr_new = np.vstack({tuple(row) for row in paths_arr_new})\n",
    "        print(len(paths_arr_new))\n",
    "\n",
    "        #Define the link latency functions\n",
    "        def link_latency(a_val, power_val, link_ff_cost, link_capacity, link_flow):\n",
    "            '''Calculates latency of link'''\n",
    "            return link_ff_cost*(1+a_val*(link_flow/link_capacity)**power_val)\n",
    "\n",
    "        def get_travel_time(sol_implement):\n",
    "            '''Find the total travel time in a given network'''\n",
    "\n",
    "            return sum([sol_implement[j_val]*link_latency(0.15, 4, int(flow_arr[j_val, 3]),  edges_arr[j_val, 3], sol_implement[j_val]) for j_val in range(len(sol_implement))])\n",
    "\n",
    "        x_sol = flow_arr[:, 6]\n",
    "        x_sol = np.array([float(i) for i in x_sol])\n",
    "        total_tt_alpha = get_travel_time(x_sol)\n",
    "        total_tt_solution2.append(total_tt_alpha)\n",
    "\n",
    "        beta_val = []\n",
    "        path_max_OD_pair = []\n",
    "        path_min_OD_pair = []\n",
    "        for OD_pair in range(int(paths_arr[-1, 1])):\n",
    "            OD_arr = paths_arr_new[paths_arr_new[:, 0] == str(OD_pair)]\n",
    "            all_paths_OD = []\n",
    "            OD_tt_paths = []\n",
    "            for path_idx, path_val in enumerate(OD_arr[:, 1]):\n",
    "                all_edges = path_val.split(',')\n",
    "                all_edges = [int(i) for i in all_edges]\n",
    "                list_edges = []\n",
    "                path_tt = 0\n",
    "                for edge_values in all_edges:\n",
    "                    list_edges.append(edge_values)\n",
    "                    path_tt += cost_sol[edge_values]\n",
    "                OD_tt_paths.append(path_tt)\n",
    "\n",
    "            #Store max and min paths per OD pair\n",
    "            path_OD_max = max(OD_tt_paths)\n",
    "            path_OD_min = min(OD_tt_paths)\n",
    "\n",
    "            if alpha_val == '.05' and OD_pair == 148:\n",
    "                print(OD_arr[OD_tt_paths.index(path_OD_max), 1])\n",
    "                print(OD_arr[:, 1])\n",
    "            path_max_OD_pair.append(OD_arr[OD_tt_paths.index(path_OD_max), 1])\n",
    "            path_min_OD_pair.append(OD_arr[OD_tt_paths.index(path_OD_min), 1])\n",
    "\n",
    "            #Find ratio of max and min\n",
    "            if path_OD_max-path_OD_min>0.001:\n",
    "                path_OD_beta = path_OD_max/path_OD_min\n",
    "            else:\n",
    "                path_OD_beta = 1\n",
    "\n",
    "            beta_val.append(path_OD_beta)\n",
    "\n",
    "        #Find percentile value of beta for this value of alpha\n",
    "        beta_new_val = [item for item, count in zip(beta_val, OD_arr__) for i in range(count)]\n",
    "        beta_dist = np.percentile(beta_new_val, percentile_val)\n",
    "\n",
    "        #Find maximum value of beta for this value of alpha\n",
    "        beta = max(beta_val) \n",
    "        final_beta.append(beta)\n",
    "        percentile_beta.append(beta_dist)\n",
    "        path_max_total[alpha_val] = path_max_OD_pair\n",
    "        path_min_total[alpha_val] = path_min_OD_pair\n",
    "        paths_total_save[alpha_val] = paths_arr_new\n",
    "        \n",
    "    final_beta = np.array(final_beta)\n",
    "    final_beta_plot = [final_beta[0]]\n",
    "    total_cost_plot = [total_cost[0]]\n",
    "    for i in range(1, len(alpha_values)):\n",
    "        restricted_beta = final_beta[final_beta<final_beta[i]]\n",
    "        if len(restricted_beta)>1:\n",
    "            idx_val_arr = []\n",
    "            total_cost_arr = []\n",
    "            for j in range(len(restricted_beta)):\n",
    "                idx_val_arr.append(list(final_beta).index(restricted_beta[j]))\n",
    "                total_cost_arr.append(total_cost[idx_val_arr[-1]])\n",
    "\n",
    "            if min(total_cost_arr)>total_cost[i]:\n",
    "                total_cost_plot.append(total_cost[i])\n",
    "                final_beta_plot.append(final_beta[i])\n",
    "                \n",
    "        else:\n",
    "            total_cost_plot.append(total_cost[i])\n",
    "            final_beta_plot.append(final_beta[i])\n",
    "    \n",
    "    if city_name == 'Massachusetts':\n",
    "        print(total_cost_plot/total_cost_plot[-1])\n",
    "        print(final_beta_plot)\n",
    "    total_cost_dict[city_name] = total_cost_plot\n",
    "    final_beta_dict[city_name] = final_beta_plot\n",
    "    percentile_beta_dict[city_name] = percentile_beta \n",
    "    final_beta_original_dict[city_name] = final_beta\n",
    "    total_cost_original_dict[city_name] = total_cost"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# I-TAP 0.05 Step Size"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/devanshjalota/anaconda3/lib/python3.7/site-packages/ipykernel_launcher.py:66: ParserWarning: Falling back to the 'python' engine because the 'c' engine does not support regex separators (separators > 1 char and different from '\\s+' are interpreted as regex); you can avoid this warning by specifying engine='python'.\n",
      "/Users/devanshjalota/anaconda3/lib/python3.7/site-packages/ipykernel_launcher.py:84: FutureWarning: arrays to stack must be passed as a \"sequence\" type such as list or tuple. Support for non-sequence iterables such as generators is deprecated as of NumPy 1.16 and will raise an error in the future.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      ".05\n",
      ".10\n",
      ".15\n",
      ".20\n",
      ".25\n",
      ".30\n",
      ".35\n",
      ".40\n",
      ".45\n",
      ".50\n",
      ".55\n",
      ".60\n",
      ".65\n",
      ".70\n",
      ".75\n",
      ".80\n",
      ".85\n",
      ".90\n",
      ".95\n",
      "1.00\n",
      "0\n",
      ".05\n",
      ".10\n",
      ".15\n",
      ".20\n",
      ".25\n",
      ".30\n",
      ".35\n",
      ".40\n",
      ".45\n",
      ".50\n",
      ".55\n",
      ".60\n",
      ".65\n",
      ".70\n",
      ".75\n",
      ".80\n",
      ".85\n",
      ".90\n",
      ".95\n",
      "1.00\n",
      "0\n",
      ".05\n",
      ".10\n",
      ".15\n",
      ".20\n",
      ".25\n",
      ".30\n",
      ".35\n",
      ".40\n",
      ".45\n",
      ".50\n",
      ".55\n",
      ".60\n",
      ".65\n",
      ".70\n",
      ".75\n",
      ".80\n",
      ".85\n",
      ".90\n",
      ".95\n",
      "1.00\n",
      "0\n",
      ".05\n",
      ".10\n",
      ".15\n",
      ".20\n",
      ".25\n",
      ".30\n",
      ".35\n",
      ".40\n",
      ".45\n",
      ".50\n",
      ".55\n",
      ".60\n",
      ".65\n",
      ".70\n",
      ".75\n",
      ".80\n",
      ".85\n",
      ".90\n",
      ".95\n",
      "1.00\n",
      "0\n",
      ".05\n",
      ".10\n",
      ".15\n",
      ".20\n",
      ".25\n",
      ".30\n",
      ".35\n",
      ".40\n",
      ".45\n",
      ".50\n",
      ".55\n",
      ".60\n",
      ".65\n",
      ".70\n",
      ".75\n",
      ".80\n",
      ".85\n",
      ".90\n",
      ".95\n",
      "1.00\n",
      "0\n",
      ".05\n",
      ".10\n",
      ".15\n",
      ".20\n",
      ".25\n",
      ".30\n",
      ".35\n",
      ".40\n",
      ".45\n",
      ".50\n",
      ".55\n",
      ".60\n",
      ".65\n",
      ".70\n",
      ".75\n",
      ".80\n",
      ".85\n",
      ".90\n",
      ".95\n",
      "1.00\n"
     ]
    }
   ],
   "source": [
    "alpha_values = ['0', '.05', '.10', '.15', '.20', '.25', '.30', '.35', '.40', '.45', '.50',\n",
    "               '.55', '.60', '.65', '.70', '.75', '.80', '.85', '.90', '.95', '1.00']\n",
    "\n",
    "final_beta_dict_05 = {}\n",
    "percentile_beta_dict_05 = {}\n",
    "total_cost_dict_05 = {}\n",
    "\n",
    "for city_name in list_cities:\n",
    "\n",
    "    main_zip = 'Alpha_Objective/' + city_name + '/' + city_name + '-'\n",
    "    main_zip_loc = 'Alpha_Objective/' + city_name + '/'\n",
    "    edges_file = 'Locations/' + city_name + '/edges.csv'\n",
    "    new_folder = 'Alpha_Objective'\n",
    "    specific_city = city_name + '.zip'\n",
    "    od_file = 'Locations/' + city_name + '/od.csv'\n",
    "    loc_ = 'constrained_approach/' + city_name + '/' + city_name +  '-constrained-'\n",
    "    \n",
    "    with zipfile.ZipFile(specific_city, 'r') as zip_ref:\n",
    "        zip_ref.extractall(new_folder)\n",
    "\n",
    "    #Edges Data\n",
    "    edges = pd.read_csv(edges_file)\n",
    "    edges_arr = np.array(edges)\n",
    "    edges_arr = np.c_[edges_arr, np.array(range(len(edges)))]\n",
    "\n",
    "    OD_mat = pd.read_csv(od_file)\n",
    "    OD_arr__ = OD_mat['volume'].values\n",
    "\n",
    "    total_cost = []\n",
    "    final_beta = []\n",
    "    percentile_beta = []\n",
    "    for alpha_val in alpha_values:\n",
    "        print(alpha_val)\n",
    "        with zipfile.ZipFile(main_zip+alpha_val+'.zip', 'r') as zip_ref:\n",
    "            zip_ref.extractall(main_zip_loc)\n",
    "\n",
    "        df_flow = pd.read_csv(main_zip+alpha_val+'/flow.csv', skiprows = 1)\n",
    "        actual_cost = np.array(df_flow['actualCost'])\n",
    "        flow = np.array(df_flow['flow'])\n",
    "        total_cost.append(sum([actual_cost[i]*flow[i] for i in range(len(actual_cost))]))\n",
    "\n",
    "\n",
    "        flow_arr = np.array(df_flow)\n",
    "\n",
    "        def find_edge2(tail_, head_):\n",
    "            '''Finds edge index for given edge'''\n",
    "\n",
    "            edges_filtered = edges_arr[edges_arr[:, 0] == tail_]\n",
    "            edges_filtered = edges_filtered[edges_filtered[:, 1] == head_]\n",
    "\n",
    "            return edges_filtered[0, -1]\n",
    "\n",
    "        #Update Flow data\n",
    "        edge_num_arr = []\n",
    "        for j in df_flow.index:\n",
    "            tail_value = int(flow_arr[j, 1])\n",
    "            head_value = int(flow_arr[j, 2])\n",
    "            edge_num_arr.append(find_edge2(tail_value, head_value))\n",
    "\n",
    "        flow_arr = np.c_[flow_arr, edge_num_arr]\n",
    "        flow_arr = flow_arr[flow_arr[:,-1].argsort()]\n",
    "\n",
    "        cost_sol = flow_arr[:, 4]\n",
    "        cost_sol = np.array([float(i) for i in cost_sol])\n",
    "\n",
    "        paths_df = pd.read_csv(main_zip+alpha_val+'/paths.csv', sep='delimiter', header=None)\n",
    "        paths_df = paths_df.iloc[2:]\n",
    "        paths_df = paths_df[0].str.split(',', 2, expand = True)\n",
    "        paths_arr = np.array(paths_df)\n",
    "\n",
    "        weights_df = pd.read_csv(main_zip+alpha_val+'/weights.csv', skiprows = 1)\n",
    "        weights_df_arr = np.array(weights_df)\n",
    "\n",
    "        #Check if weight is at least 1/10th of the maximum weight\n",
    "        small_arr = []\n",
    "        for i in range(len(weights_df_arr)):\n",
    "            if weights_df_arr[i, 1] > max(weights_df_arr[:, 1])/10:\n",
    "                small_arr.append(i)\n",
    "\n",
    "        paths_arr[:, 0] = [int(i) for i in paths_arr[:, 0]]\n",
    "        #paths_arr_ue = np.append(paths_arr_ue, np.array(weig), axis=1)\n",
    "        paths_arr = paths_arr[paths_arr[:, 0]>=min(small_arr)]\n",
    "        paths_arr_new = paths_arr[:, 1:]\n",
    "        paths_arr_new = np.vstack({tuple(row) for row in paths_arr_new})\n",
    "\n",
    "        beta_val = []\n",
    "        for OD_pair in range(int(paths_arr[-1, 1])):\n",
    "            OD_arr = paths_arr_new[paths_arr_new[:, 0] == str(OD_pair)]\n",
    "            all_paths_OD = []\n",
    "            OD_tt_paths = []\n",
    "            for path_idx, path_val in enumerate(OD_arr[:, 1]):\n",
    "                all_edges = path_val.split(',')\n",
    "                all_edges = [int(i) for i in all_edges]\n",
    "                list_edges = []\n",
    "                path_tt = 0\n",
    "                for edge_values in all_edges:\n",
    "                    list_edges.append(edge_values)\n",
    "                    path_tt += cost_sol[edge_values]\n",
    "                OD_tt_paths.append(path_tt)\n",
    "\n",
    "            #Store max and min paths per OD pair\n",
    "            path_OD_max = max(OD_tt_paths)\n",
    "            path_OD_min = min(OD_tt_paths)\n",
    "\n",
    "            #Find ratio of max and min\n",
    "            if path_OD_max-path_OD_min>0.001:\n",
    "                path_OD_beta = path_OD_max/path_OD_min\n",
    "            else:\n",
    "                path_OD_beta = 1\n",
    "\n",
    "            beta_val.append(path_OD_beta)\n",
    "\n",
    "        #Find percentile value of beta for this value of alpha\n",
    "        beta_new_val = [item for item, count in zip(beta_val, OD_arr__) for i in range(count)]\n",
    "        beta_dist = np.percentile(beta_new_val, percentile_val)\n",
    "\n",
    "        #Find maximum value of beta for this value of alpha\n",
    "        beta = max(beta_val) \n",
    "        final_beta.append(beta)\n",
    "        percentile_beta.append(beta_dist)\n",
    "        \n",
    "    final_beta = np.array(final_beta)\n",
    "    final_beta_plot = [final_beta[0]]\n",
    "    total_cost_plot = [total_cost[0]]\n",
    "    for i in range(1, len(alpha_values)):\n",
    "        restricted_beta = final_beta[final_beta<final_beta[i]]\n",
    "        if len(restricted_beta)>1:\n",
    "            idx_val_arr = []\n",
    "            total_cost_arr = []\n",
    "            for j in range(len(restricted_beta)):\n",
    "                idx_val_arr.append(list(final_beta).index(restricted_beta[j]))\n",
    "                total_cost_arr.append(total_cost[idx_val_arr[-1]])\n",
    "\n",
    "            if min(total_cost_arr)>total_cost[i]:\n",
    "                total_cost_plot.append(total_cost[i])\n",
    "                final_beta_plot.append(final_beta[i])\n",
    "                \n",
    "        else:\n",
    "            total_cost_plot.append(total_cost[i])\n",
    "            final_beta_plot.append(final_beta[i])\n",
    "        \n",
    "    total_cost_dict_05[city_name] = total_cost_plot\n",
    "    final_beta_dict_05[city_name] = final_beta_plot\n",
    "    percentile_beta_dict_05[city_name] = percentile_beta "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# I-Solution 0.01 Step Size"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/devanshjalota/anaconda3/lib/python3.7/site-packages/ipykernel_launcher.py:75: ParserWarning: Falling back to the 'python' engine because the 'c' engine does not support regex separators (separators > 1 char and different from '\\s+' are interpreted as regex); you can avoid this warning by specifying engine='python'.\n",
      "/Users/devanshjalota/anaconda3/lib/python3.7/site-packages/ipykernel_launcher.py:76: ParserWarning: Falling back to the 'python' engine because the 'c' engine does not support regex separators (separators > 1 char and different from '\\s+' are interpreted as regex); you can avoid this warning by specifying engine='python'.\n",
      "/Users/devanshjalota/anaconda3/lib/python3.7/site-packages/ipykernel_launcher.py:99: FutureWarning: arrays to stack must be passed as a \"sequence\" type such as list or tuple. Support for non-sequence iterables such as generators is deprecated as of NumPy 1.16 and will raise an error in the future.\n",
      "/Users/devanshjalota/anaconda3/lib/python3.7/site-packages/ipykernel_launcher.py:114: FutureWarning: arrays to stack must be passed as a \"sequence\" type such as list or tuple. Support for non-sequence iterables such as generators is deprecated as of NumPy 1.16 and will raise an error in the future.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0\n",
      "100\n",
      "200\n",
      "300\n",
      "400\n",
      "500\n",
      "600\n",
      "0\n",
      "100\n",
      "200\n",
      "300\n",
      "400\n",
      "500\n",
      "600\n",
      "0.0\n",
      "0.0\n",
      "0.01\n",
      "0.01\n",
      "0.02\n",
      "0.02\n",
      "0.03\n",
      "0.03\n",
      "0.04\n",
      "0.04\n",
      "0.05\n",
      "0.05\n",
      "0.06\n",
      "0.06\n",
      "0.07\n",
      "0.07\n",
      "0.08\n",
      "0.08\n",
      "0.09\n",
      "0.09\n",
      "0.1\n",
      "0.1\n",
      "0.11\n",
      "0.11\n",
      "0.12\n",
      "0.12\n",
      "0.13\n",
      "0.13\n",
      "0.14\n",
      "0.14\n",
      "0.15\n",
      "0.15\n",
      "0.16\n",
      "0.16\n",
      "0.17\n",
      "0.17\n",
      "0.18\n",
      "0.18\n",
      "0.19\n",
      "0.19\n",
      "0.2\n",
      "0.2\n",
      "0.21\n",
      "0.21\n",
      "0.22\n",
      "0.22\n",
      "0.23\n",
      "0.23\n",
      "0.24\n",
      "0.24\n",
      "0.25\n",
      "0.25\n",
      "0.26\n",
      "0.26\n",
      "0.27\n",
      "0.27\n",
      "0.28\n",
      "0.28\n",
      "0.29\n",
      "0.29\n",
      "0.3\n",
      "0.3\n",
      "0.31\n",
      "0.31\n",
      "0.32\n",
      "0.32\n",
      "0.33\n",
      "0.33\n",
      "0.34\n",
      "0.34\n",
      "0.35000000000000003\n",
      "0.35000000000000003\n",
      "0.36\n",
      "0.36\n",
      "0.37\n",
      "0.37\n",
      "0.38\n",
      "0.38\n",
      "0.39\n",
      "0.39\n",
      "0.4\n",
      "0.4\n",
      "0.41000000000000003\n",
      "0.41000000000000003\n",
      "0.42\n",
      "0.42\n",
      "0.43\n",
      "0.43\n",
      "0.44\n",
      "0.44\n",
      "0.45\n",
      "0.45\n",
      "0.46\n",
      "0.46\n",
      "0.47000000000000003\n",
      "0.47000000000000003\n",
      "0.48\n",
      "0.48\n",
      "0.49\n",
      "0.49\n",
      "0.5\n",
      "0.5\n",
      "0.51\n",
      "0.51\n",
      "0.52\n",
      "0.52\n",
      "0.53\n",
      "0.53\n",
      "0.54\n",
      "0.54\n",
      "0.55\n",
      "0.55\n",
      "0.56\n",
      "0.56\n",
      "0.5700000000000001\n",
      "0.5700000000000001\n",
      "0.58\n",
      "0.58\n",
      "0.59\n",
      "0.59\n",
      "0.6\n",
      "0.6\n",
      "0.61\n",
      "0.61\n",
      "0.62\n",
      "0.62\n",
      "0.63\n",
      "0.63\n",
      "0.64\n",
      "0.64\n",
      "0.65\n",
      "0.65\n",
      "0.66\n",
      "0.66\n",
      "0.67\n",
      "0.67\n",
      "0.68\n",
      "0.68\n",
      "0.6900000000000001\n",
      "0.6900000000000001\n",
      "0.7000000000000001\n",
      "0.7000000000000001\n",
      "0.71\n",
      "0.71\n",
      "0.72\n",
      "0.72\n",
      "0.73\n",
      "0.73\n",
      "0.74\n",
      "0.74\n",
      "0.75\n",
      "0.75\n",
      "0.76\n",
      "0.76\n",
      "0.77\n",
      "0.77\n",
      "0.78\n",
      "0.78\n",
      "0.79\n",
      "0.79\n",
      "0.8\n",
      "0.8\n",
      "0.81\n",
      "0.81\n",
      "0.8200000000000001\n",
      "0.8200000000000001\n",
      "0.8300000000000001\n",
      "0.8300000000000001\n",
      "0.84\n",
      "0.84\n",
      "0.85\n",
      "0.85\n",
      "0.86\n",
      "0.86\n",
      "0.87\n",
      "0.87\n",
      "0.88\n",
      "0.88\n",
      "0.89\n",
      "0.89\n",
      "0.9\n",
      "0.9\n",
      "0.91\n",
      "0.91\n",
      "0.92\n",
      "0.92\n",
      "0.93\n",
      "0.93\n",
      "0.9400000000000001\n",
      "0.9400000000000001\n",
      "0.9500000000000001\n",
      "0.9500000000000001\n",
      "0.96\n",
      "0.96\n",
      "0.97\n",
      "0.97\n",
      "0.98\n",
      "0.98\n",
      "0.99\n",
      "0.99\n",
      "1.0\n",
      "1.0\n",
      "[2045656.5882916288, 2045656.9326277422, 2045664.6259238913, 2045679.7385781251, 2045702.3416807922, 2045732.5070169556, 2045770.307068778, 2045815.8150179405, 2045869.1047480374, 2045930.2508469794, 2045999.328609398, 2046076.4140390474, 2046161.5838512077, 2046254.9154750893, 2046356.4870562325, 2046466.3774589098, 2046584.666268537, 2046711.4337940572, 2046846.7610703742, 2046990.7298607202, 2047143.4226590847, 2047304.9226926041, 2047475.3139239715, 2047654.6810538343, 2047843.1095232016, 2048040.685515839, 2048247.495960683, 2048463.6285342346, 2048689.1716629656, 2048924.214525721, 2049168.8470561204, 2049423.159944966, 2049687.2446426358, 2049961.1933614977, 2050245.0990783004, 2050539.0555365896, 2050843.1572490982, 2051157.4995001582, 2051482.1783480945, 2051817.2906276383, 2052162.9339523204, 2052519.2067168828, 2052886.2080996733, 2053264.0380650493, 2053652.7973657907, 2054052.5875454876, 2054463.5109409562, 2054885.6706846291, 2055319.1707069727, 2055764.1157388783, 2056220.6113140653, 2056688.7637714944, 2057168.6802577577, 2057660.4687294906, 2058164.2379557686, 2058680.0975205177, 2059208.1578249033, 2059748.5300897493, 2060301.3263579332, 2060866.6594967835, 2061444.6432004918, 2062035.3919925133, 2062639.0212279651, 2063255.6470960327, 2063885.3866223725, 2064528.3576715158, 2065184.6789492678, 2065854.4700051132, 2066537.8512346155, 2067234.943881829, 2067945.8700416873, 2068670.7526624228, 2069409.715547953, 2070162.883360295, 2070930.3816219612, 2071712.3367183693, 2072508.8759002362, 2073320.1272859897, 2074146.2198641626, 2074987.283495805, 2075843.4489168776, 2076714.847740661, 2077601.6124601555, 2078503.8764504879, 2079421.7739713043, 2080355.440169185, 2081305.0110800418, 2082270.6236315207, 2083252.415645403, 2084250.5258400117, 2085265.0938326088, 2086296.26014181, 2087344.1661899725, 2088408.954305607, 2089490.767725776, 2090589.7505985028, 2091706.0479851675, 2092839.805862912, 2093991.1711270446, 2095160.2915934443, 2096347.31600095]\n",
      "0\n",
      "100\n",
      "200\n",
      "300\n",
      "400\n",
      "500\n",
      "0\n",
      "100\n",
      "200\n",
      "300\n",
      "400\n",
      "500\n",
      "0.0\n",
      "0.0\n",
      "0.01\n",
      "0.01\n",
      "0.02\n",
      "0.02\n",
      "0.03\n",
      "0.03\n",
      "0.04\n",
      "0.04\n",
      "0.05\n",
      "0.05\n",
      "0.06\n",
      "0.06\n",
      "0.07\n",
      "0.07\n",
      "0.08\n",
      "0.08\n",
      "0.09\n",
      "0.09\n",
      "0.1\n",
      "0.1\n",
      "0.11\n",
      "0.11\n",
      "0.12\n",
      "0.12\n",
      "0.13\n",
      "0.13\n",
      "0.14\n",
      "0.14\n",
      "0.15\n",
      "0.15\n",
      "0.16\n",
      "0.16\n",
      "0.17\n",
      "0.17\n",
      "0.18\n",
      "0.18\n",
      "0.19\n",
      "0.19\n",
      "0.2\n",
      "0.2\n",
      "0.21\n",
      "0.21\n",
      "0.22\n",
      "0.22\n",
      "0.23\n",
      "0.23\n",
      "0.24\n",
      "0.24\n",
      "0.25\n",
      "0.25\n",
      "0.26\n",
      "0.26\n",
      "0.27\n",
      "0.27\n",
      "0.28\n",
      "0.28\n",
      "0.29\n",
      "0.29\n",
      "0.3\n",
      "0.3\n",
      "0.31\n",
      "0.31\n",
      "0.32\n",
      "0.32\n",
      "0.33\n",
      "0.33\n",
      "0.34\n",
      "0.34\n",
      "0.35000000000000003\n",
      "0.35000000000000003\n",
      "0.36\n",
      "0.36\n",
      "0.37\n",
      "0.37\n",
      "0.38\n",
      "0.38\n",
      "0.39\n",
      "0.39\n",
      "0.4\n",
      "0.4\n",
      "0.41000000000000003\n",
      "0.41000000000000003\n",
      "0.42\n",
      "0.42\n",
      "0.43\n",
      "0.43\n",
      "0.44\n",
      "0.44\n",
      "0.45\n",
      "0.45\n",
      "0.46\n",
      "0.46\n",
      "0.47000000000000003\n",
      "0.47000000000000003\n",
      "0.48\n",
      "0.48\n",
      "0.49\n",
      "0.49\n",
      "0.5\n",
      "0.5\n",
      "0.51\n",
      "0.51\n",
      "0.52\n",
      "0.52\n",
      "0.53\n",
      "0.53\n",
      "0.54\n",
      "0.54\n",
      "0.55\n",
      "0.55\n",
      "0.56\n",
      "0.56\n",
      "0.5700000000000001\n",
      "0.5700000000000001\n",
      "0.58\n",
      "0.58\n",
      "0.59\n",
      "0.59\n",
      "0.6\n",
      "0.6\n",
      "0.61\n",
      "0.61\n",
      "0.62\n",
      "0.62\n",
      "0.63\n",
      "0.63\n",
      "0.64\n",
      "0.64\n",
      "0.65\n",
      "0.65\n",
      "0.66\n",
      "0.66\n",
      "0.67\n",
      "0.67\n",
      "0.68\n",
      "0.68\n",
      "0.6900000000000001\n",
      "0.6900000000000001\n",
      "0.7000000000000001\n",
      "0.7000000000000001\n",
      "0.71\n",
      "0.71\n",
      "0.72\n",
      "0.72\n",
      "0.73\n",
      "0.73\n",
      "0.74\n",
      "0.74\n",
      "0.75\n",
      "0.75\n",
      "0.76\n",
      "0.76\n",
      "0.77\n",
      "0.77\n",
      "0.78\n",
      "0.78\n",
      "0.79\n",
      "0.79\n",
      "0.8\n",
      "0.8\n",
      "0.81\n",
      "0.81\n",
      "0.8200000000000001\n",
      "0.8200000000000001\n",
      "0.8300000000000001\n",
      "0.8300000000000001\n",
      "0.84\n",
      "0.84\n",
      "0.85\n",
      "0.85\n",
      "0.86\n",
      "0.86\n",
      "0.87\n",
      "0.87\n",
      "0.88\n",
      "0.88\n",
      "0.89\n",
      "0.89\n",
      "0.9\n",
      "0.9\n",
      "0.91\n",
      "0.91\n",
      "0.92\n",
      "0.92\n",
      "0.93\n",
      "0.93\n",
      "0.9400000000000001\n",
      "0.9400000000000001\n",
      "0.9500000000000001\n",
      "0.9500000000000001\n",
      "0.96\n",
      "0.96\n",
      "0.97\n",
      "0.97\n",
      "0.98\n",
      "0.98\n",
      "0.99\n",
      "0.99\n",
      "1.0\n",
      "1.0\n",
      "[1512355.685687568, 1512396.3139693483, 1512454.7816248697, 1512531.2392066808, 1512625.8389952502, 1512738.735003191, 1512870.082979486, 1513020.0404137159, 1513188.7665402805, 1513376.4223426266, 1513583.1705574768, 1513809.1756790492, 1514054.6039632857, 1514319.623432077, 1514604.4038774918, 1514909.1168659946, 1515233.9357426807, 1515579.0356354923, 1515944.5934594541, 1516330.7879208885, 1516737.7995216486, 1517165.8105633412, 1517615.0051515512, 1518085.5692000727, 1518577.6904351255, 1519091.558399586, 1519627.3644572163, 1520185.3017968812, 1520765.5654367825, 1521368.352228677, 1521993.8608621033, 1522642.2918686199, 1523313.847626009, 1524008.7323625193, 1524727.1521610839, 1525469.3149635487, 1526235.4305748977, 1527025.710667475, 1527840.3687852176, 1528679.6203478714, 1529543.6826552264, 1530432.7748913353, 1531347.1181287426, 1532286.9353327104, 1533252.4513654392, 1534243.892990301, 1535261.4888760592, 1536305.4696010954, 1537376.067657635, 1538473.5174559767, 1539598.0553287095, 1540749.9195349473, 1541929.3502645476, 1543136.5896423424, 1544371.8817323626, 1545635.4725420575, 1546927.6100265267, 1548248.5440927483, 1549598.5266037972, 1550977.8113830732, 1552386.6542185268, 1553825.3128668878, 1555294.0470578866, 1556793.1184984818, 1558322.7908770835, 1559883.3298677849, 1561475.0031345799, 1563098.0803355924, 1564752.8331273051, 1566439.5351687805, 1568158.462125886, 1569909.8916755216, 1571694.1035098492, 1573511.3793405101, 1575362.002902855, 1577246.259960171, 1579164.4383079053, 1581116.8277778896, 1583103.7202425662, 1585125.4096192173, 1587182.1918741853, 1589274.365027101, 1591402.2291551079, 1593566.0863970923, 1595766.2409579004, 1598002.9991125716, 1600276.669210561, 1602587.561679965, 1604935.9890317458, 1607322.2658639597, 1609746.7088659813, 1612209.6368227275, 1614711.3706188856, 1617252.233243137, 1619832.5497923847, 1622452.647475978, 1636161.4536399404]\n",
      "0\n",
      "100\n",
      "200\n",
      "300\n",
      "400\n",
      "500\n",
      "600\n",
      "700\n",
      "800\n",
      "900\n",
      "1000\n",
      "1100\n",
      "1200\n",
      "1300\n",
      "1400\n",
      "0\n",
      "100\n",
      "200\n",
      "300\n",
      "400\n",
      "500\n",
      "600\n",
      "700\n",
      "800\n",
      "900\n",
      "1000\n",
      "1100\n",
      "1200\n",
      "1300\n",
      "1400\n",
      "0.0\n",
      "0.0\n",
      "0.01\n",
      "0.01\n",
      "0.02\n",
      "0.02\n",
      "0.03\n",
      "0.03\n",
      "0.04\n",
      "0.04\n",
      "0.05\n",
      "0.05\n",
      "0.06\n",
      "0.06\n",
      "0.07\n",
      "0.07\n",
      "0.08\n",
      "0.08\n",
      "0.09\n",
      "0.09\n",
      "0.1\n",
      "0.1\n",
      "0.11\n",
      "0.11\n",
      "0.12\n",
      "0.12\n",
      "0.13\n",
      "0.13\n",
      "0.14\n",
      "0.14\n",
      "0.15\n",
      "0.15\n",
      "0.16\n",
      "0.16\n",
      "0.17\n",
      "0.17\n",
      "0.18\n",
      "0.18\n",
      "0.19\n",
      "0.19\n",
      "0.2\n",
      "0.2\n",
      "0.21\n",
      "0.21\n",
      "0.22\n",
      "0.22\n",
      "0.23\n",
      "0.23\n",
      "0.24\n",
      "0.24\n",
      "0.25\n",
      "0.25\n",
      "0.26\n",
      "0.26\n",
      "0.27\n",
      "0.27\n",
      "0.28\n",
      "0.28\n",
      "0.29\n",
      "0.29\n",
      "0.3\n",
      "0.3\n",
      "0.31\n",
      "0.31\n",
      "0.32\n",
      "0.32\n",
      "0.33\n",
      "0.33\n",
      "0.34\n",
      "0.34\n",
      "0.35000000000000003\n",
      "0.35000000000000003\n",
      "0.36\n",
      "0.36\n",
      "0.37\n",
      "0.37\n",
      "0.38\n",
      "0.38\n",
      "0.39\n",
      "0.39\n",
      "0.4\n",
      "0.4\n",
      "0.41000000000000003\n",
      "0.41000000000000003\n",
      "0.42\n",
      "0.42\n",
      "0.43\n",
      "0.43\n",
      "0.44\n",
      "0.44\n",
      "0.45\n",
      "0.45\n",
      "0.46\n",
      "0.46\n",
      "0.47000000000000003\n",
      "0.47000000000000003\n",
      "0.48\n",
      "0.48\n",
      "0.49\n",
      "0.49\n",
      "0.5\n",
      "0.5\n",
      "0.51\n",
      "0.51\n",
      "0.52\n",
      "0.52\n",
      "0.53\n",
      "0.53\n",
      "0.54\n",
      "0.54\n",
      "0.55\n",
      "0.55\n",
      "0.56\n",
      "0.56\n",
      "0.5700000000000001\n",
      "0.5700000000000001\n",
      "0.58\n",
      "0.58\n",
      "0.59\n",
      "0.59\n",
      "0.6\n",
      "0.6\n",
      "0.61\n",
      "0.61\n",
      "0.62\n",
      "0.62\n",
      "0.63\n",
      "0.63\n",
      "0.64\n",
      "0.64\n",
      "0.65\n",
      "0.65\n",
      "0.66\n",
      "0.66\n",
      "0.67\n",
      "0.67\n",
      "0.68\n",
      "0.68\n",
      "0.6900000000000001\n",
      "0.6900000000000001\n",
      "0.7000000000000001\n",
      "0.7000000000000001\n",
      "0.71\n",
      "0.71\n",
      "0.72\n",
      "0.72\n",
      "0.73\n",
      "0.73\n",
      "0.74\n",
      "0.74\n",
      "0.75\n",
      "0.75\n",
      "0.76\n",
      "0.76\n",
      "0.77\n",
      "0.77\n",
      "0.78\n",
      "0.78\n",
      "0.79\n",
      "0.79\n",
      "0.8\n",
      "0.8\n",
      "0.81\n",
      "0.81\n",
      "0.8200000000000001\n",
      "0.8200000000000001\n",
      "0.8300000000000001\n",
      "0.8300000000000001\n",
      "0.84\n",
      "0.84\n",
      "0.85\n",
      "0.85\n",
      "0.86\n",
      "0.86\n",
      "0.87\n",
      "0.87\n",
      "0.88\n",
      "0.88\n",
      "0.89\n",
      "0.89\n",
      "0.9\n",
      "0.9\n",
      "0.91\n",
      "0.91\n",
      "0.92\n",
      "0.92\n",
      "0.93\n",
      "0.93\n",
      "0.9400000000000001\n",
      "0.9400000000000001\n",
      "0.9500000000000001\n",
      "0.9500000000000001\n",
      "0.96\n",
      "0.96\n",
      "0.97\n",
      "0.97\n",
      "0.98\n",
      "0.98\n",
      "0.99\n",
      "0.99\n",
      "1.0\n",
      "1.0\n",
      "[77883513.61575371, 77960361.9902094, 77965331.58194363, 78857655.44538084]\n",
      "0\n",
      "100\n",
      "200\n",
      "300\n",
      "400\n",
      "500\n",
      "600\n",
      "700\n",
      "800\n",
      "900\n",
      "1000\n",
      "1100\n",
      "0\n",
      "100\n",
      "200\n",
      "300\n",
      "400\n",
      "500\n",
      "600\n",
      "700\n",
      "800\n",
      "900\n",
      "1000\n",
      "1100\n",
      "0.0\n",
      "0.0\n",
      "0.01\n",
      "0.01\n",
      "0.02\n",
      "0.02\n",
      "0.03\n",
      "0.03\n",
      "0.04\n",
      "0.04\n",
      "0.05\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0.05\n",
      "0.06\n",
      "0.06\n",
      "0.07\n",
      "0.07\n",
      "0.08\n",
      "0.08\n",
      "0.09\n",
      "0.09\n",
      "0.1\n",
      "0.1\n",
      "0.11\n",
      "0.11\n",
      "0.12\n",
      "0.12\n",
      "0.13\n",
      "0.13\n",
      "0.14\n",
      "0.14\n",
      "0.15\n",
      "0.15\n",
      "0.16\n",
      "0.16\n",
      "0.17\n",
      "0.17\n",
      "0.18\n",
      "0.18\n",
      "0.19\n",
      "0.19\n",
      "0.2\n",
      "0.2\n",
      "0.21\n",
      "0.21\n",
      "0.22\n",
      "0.22\n",
      "0.23\n",
      "0.23\n",
      "0.24\n",
      "0.24\n",
      "0.25\n",
      "0.25\n",
      "0.26\n",
      "0.26\n",
      "0.27\n",
      "0.27\n",
      "0.28\n",
      "0.28\n",
      "0.29\n",
      "0.29\n",
      "0.3\n",
      "0.3\n",
      "0.31\n",
      "0.31\n",
      "0.32\n",
      "0.32\n",
      "0.33\n",
      "0.33\n",
      "0.34\n",
      "0.34\n",
      "0.35000000000000003\n",
      "0.35000000000000003\n",
      "0.36\n",
      "0.36\n",
      "0.37\n",
      "0.37\n",
      "0.38\n",
      "0.38\n",
      "0.39\n",
      "0.39\n",
      "0.4\n",
      "0.4\n",
      "0.41000000000000003\n",
      "0.41000000000000003\n",
      "0.42\n",
      "0.42\n",
      "0.43\n",
      "0.43\n",
      "0.44\n",
      "0.44\n",
      "0.45\n",
      "0.45\n",
      "0.46\n",
      "0.46\n",
      "0.47000000000000003\n",
      "0.47000000000000003\n",
      "0.48\n",
      "0.48\n",
      "0.49\n",
      "0.49\n",
      "0.5\n",
      "0.5\n",
      "0.51\n",
      "0.51\n",
      "0.52\n",
      "0.52\n",
      "0.53\n",
      "0.53\n",
      "0.54\n",
      "0.54\n",
      "0.55\n",
      "0.55\n",
      "0.56\n",
      "0.56\n",
      "0.5700000000000001\n",
      "0.5700000000000001\n",
      "0.58\n",
      "0.58\n",
      "0.59\n",
      "0.59\n",
      "0.6\n",
      "0.6\n",
      "0.61\n",
      "0.61\n",
      "0.62\n",
      "0.62\n",
      "0.63\n",
      "0.63\n",
      "0.64\n",
      "0.64\n",
      "0.65\n",
      "0.65\n",
      "0.66\n",
      "0.66\n",
      "0.67\n",
      "0.67\n",
      "0.68\n",
      "0.68\n",
      "0.6900000000000001\n",
      "0.6900000000000001\n",
      "0.7000000000000001\n",
      "0.7000000000000001\n",
      "0.71\n",
      "0.71\n",
      "0.72\n",
      "0.72\n",
      "0.73\n",
      "0.73\n",
      "0.74\n",
      "0.74\n",
      "0.75\n",
      "0.75\n",
      "0.76\n",
      "0.76\n",
      "0.77\n",
      "0.77\n",
      "0.78\n",
      "0.78\n",
      "0.79\n",
      "0.79\n",
      "0.8\n",
      "0.8\n",
      "0.81\n",
      "0.81\n",
      "0.8200000000000001\n",
      "0.8200000000000001\n",
      "0.8300000000000001\n",
      "0.8300000000000001\n",
      "0.84\n",
      "0.84\n",
      "0.85\n",
      "0.85\n",
      "0.86\n",
      "0.86\n",
      "0.87\n",
      "0.87\n",
      "0.88\n",
      "0.88\n",
      "0.89\n",
      "0.89\n",
      "0.9\n",
      "0.9\n",
      "0.91\n",
      "0.91\n",
      "0.92\n",
      "0.92\n",
      "0.93\n",
      "0.93\n",
      "0.9400000000000001\n",
      "0.9400000000000001\n",
      "0.9500000000000001\n",
      "0.9500000000000001\n",
      "0.96\n",
      "0.96\n",
      "0.97\n",
      "0.97\n",
      "0.98\n",
      "0.98\n",
      "0.99\n",
      "0.99\n",
      "1.0\n",
      "1.0\n",
      "[101666540.13658397, 101817625.22353107, 101830944.98277941, 101844828.10690027, 101859278.6306118, 101874300.63204192, 101889898.23273788, 101906075.59767745, 101922836.93527865, 101940186.4974109, 101958128.57940462, 101976667.52006254, 101995807.7016693, 102015553.55000243, 102035909.53434254, 102056880.16748393, 102078470.00574468, 102100683.64897731, 102123525.7405793, 102147000.9675032, 102171114.06026736, 102195869.7929662, 102221272.98328063, 102247328.49248849, 102274041.225475, 102301416.1307432, 102329458.20042427, 102358172.47028811, 102387564.01975358, 102417637.9718991, 102448399.49347301, 102479853.79490395, 102512006.13031124, 102544861.79751539, 102578426.13804863, 102612704.5371651, 102647702.42385143, 102683425.27083704, 102719878.59460482, 102757067.9554012, 102794998.95724678, 102833677.2479468, 102873108.51910138, 102913298.50611608, 102954252.98821236, 102995977.78843795, 103038478.77367705, 103081761.85466118, 103125832.98597927, 103170698.16608836, 103216363.4373235, 103262834.88590899, 103310118.64196806, 103358220.87953353, 103407147.81655857, 103456905.71492667, 103507500.88046214, 103558939.6629407, 103611228.45609991, 103664373.69764946, 103718381.86928159, 103773259.4966816, 103829013.14953831, 103885649.44155434, 103943175.03045656, 104001596.61800656, 104060920.95001133, 104121154.81633314, 104182305.05090035, 104244378.53171769, 104307382.18087685, 104371322.96456659, 104436207.89308354, 104502044.02084245, 104568838.44638631, 104636598.31239738, 104705330.80570714, 104775043.15730707, 104845742.64235856, 104917436.58020383, 104990132.33437614, 105063837.31261036, 105138558.96685302]\n",
      "0\n",
      "100\n",
      "200\n",
      "300\n",
      "400\n",
      "500\n",
      "0\n",
      "100\n",
      "200\n",
      "300\n",
      "400\n",
      "500\n",
      "0.0\n",
      "0.0\n",
      "0.01\n",
      "0.01\n",
      "0.02\n",
      "0.02\n",
      "0.03\n",
      "0.03\n",
      "0.04\n",
      "0.04\n",
      "0.05\n",
      "0.05\n",
      "0.06\n",
      "0.06\n",
      "0.07\n",
      "0.07\n",
      "0.08\n",
      "0.08\n",
      "0.09\n",
      "0.09\n",
      "0.1\n",
      "0.1\n",
      "0.11\n",
      "0.11\n",
      "0.12\n",
      "0.12\n",
      "0.13\n",
      "0.13\n",
      "0.14\n",
      "0.14\n",
      "0.15\n",
      "0.15\n",
      "0.16\n",
      "0.16\n",
      "0.17\n",
      "0.17\n",
      "0.18\n",
      "0.18\n",
      "0.19\n",
      "0.19\n",
      "0.2\n",
      "0.2\n",
      "0.21\n",
      "0.21\n",
      "0.22\n",
      "0.22\n",
      "0.23\n",
      "0.23\n",
      "0.24\n",
      "0.24\n",
      "0.25\n",
      "0.25\n",
      "0.26\n",
      "0.26\n",
      "0.27\n",
      "0.27\n",
      "0.28\n",
      "0.28\n",
      "0.29\n",
      "0.29\n",
      "0.3\n",
      "0.3\n",
      "0.31\n",
      "0.31\n",
      "0.32\n",
      "0.32\n",
      "0.33\n",
      "0.33\n",
      "0.34\n",
      "0.34\n",
      "0.35000000000000003\n",
      "0.35000000000000003\n",
      "0.36\n",
      "0.36\n",
      "0.37\n",
      "0.37\n",
      "0.38\n",
      "0.38\n",
      "0.39\n",
      "0.39\n",
      "0.4\n",
      "0.4\n",
      "0.41000000000000003\n",
      "0.41000000000000003\n",
      "0.42\n",
      "0.42\n",
      "0.43\n",
      "0.43\n",
      "0.44\n",
      "0.44\n",
      "0.45\n",
      "0.45\n",
      "0.46\n",
      "0.46\n",
      "0.47000000000000003\n",
      "0.47000000000000003\n",
      "0.48\n",
      "0.48\n",
      "0.49\n",
      "0.49\n",
      "0.5\n",
      "0.5\n",
      "0.51\n",
      "0.51\n",
      "0.52\n",
      "0.52\n",
      "0.53\n",
      "0.53\n",
      "0.54\n",
      "0.54\n",
      "0.55\n",
      "0.55\n",
      "0.56\n",
      "0.56\n",
      "0.5700000000000001\n",
      "0.5700000000000001\n",
      "0.58\n",
      "0.58\n",
      "0.59\n",
      "0.59\n",
      "0.6\n",
      "0.6\n",
      "0.61\n",
      "0.61\n",
      "0.62\n",
      "0.62\n",
      "0.63\n",
      "0.63\n",
      "0.64\n",
      "0.64\n",
      "0.65\n",
      "0.65\n",
      "0.66\n",
      "0.66\n",
      "0.67\n",
      "0.67\n",
      "0.68\n",
      "0.68\n",
      "0.6900000000000001\n",
      "0.6900000000000001\n",
      "0.7000000000000001\n",
      "0.7000000000000001\n",
      "0.71\n",
      "0.71\n",
      "0.72\n",
      "0.72\n",
      "0.73\n",
      "0.73\n",
      "0.74\n",
      "0.74\n",
      "0.75\n",
      "0.75\n",
      "0.76\n",
      "0.76\n",
      "0.77\n",
      "0.77\n",
      "0.78\n",
      "0.78\n",
      "0.79\n",
      "0.79\n",
      "0.8\n",
      "0.8\n",
      "0.81\n",
      "0.81\n",
      "0.8200000000000001\n",
      "0.8200000000000001\n",
      "0.8300000000000001\n",
      "0.8300000000000001\n",
      "0.84\n",
      "0.84\n",
      "0.85\n",
      "0.85\n",
      "0.86\n",
      "0.86\n",
      "0.87\n",
      "0.87\n",
      "0.88\n",
      "0.88\n",
      "0.89\n",
      "0.89\n",
      "0.9\n",
      "0.9\n",
      "0.91\n",
      "0.91\n",
      "0.92\n",
      "0.92\n",
      "0.93\n",
      "0.93\n",
      "0.9400000000000001\n",
      "0.9400000000000001\n",
      "0.9500000000000001\n",
      "0.9500000000000001\n",
      "0.96\n",
      "0.96\n",
      "0.97\n",
      "0.97\n",
      "0.98\n",
      "0.98\n",
      "0.99\n",
      "0.99\n",
      "1.0\n",
      "1.0\n",
      "[428827270.03780526, 428886503.312501, 428947704.12781787, 429010876.1163569, 429076022.9402343, 429143148.2911131, 429212255.8902342, 429283349.48844886, 429356432.86624897, 429431509.83380014, 429508584.2309724, 429587659.9273723, 429668740.82237417, 429751830.8451519, 429836933.95471054, 429924054.1399171, 430013195.41953456, 430104361.8422503, 430197557.4867104, 430292786.46154886, 430390052.9054215, 430489360.9870366, 430590714.90518576, 430694118.88877666, 430799577.19686395, 430907094.1186814, 431016673.97367316, 431128321.11152524, 431242039.9121977, 431357834.7859555, 431475710.1734009, 431595670.54550415, 431717720.403636, 431841864.27959883, 431968106.7356588, 432096452.3645761, 432226905.78963816, 432359471.66469043, 432494154.6741681, 432630959.5331282, 432769890.98727983, 432910953.8130177, 433054152.81745213, 433199492.8384414, 433346978.7446233, 433496615.4354468, 433648407.8412036, 433802360.92305917, 433958479.6730853, 434116769.1142921, 434277234.30065674, 434439880.31715935, 434604712.27981025, 434771735.3356859, 434940954.6629569, 435112375.4709211, 435286003.0000361, 445195430.1214683]\n",
      "0\n",
      "100\n",
      "200\n",
      "300\n",
      "400\n",
      "500\n",
      "600\n",
      "700\n",
      "800\n",
      "900\n",
      "1000\n",
      "1100\n",
      "1200\n",
      "1300\n",
      "1400\n",
      "0\n",
      "100\n",
      "200\n",
      "300\n",
      "400\n",
      "500\n",
      "600\n",
      "700\n",
      "800\n",
      "900\n",
      "1000\n",
      "1100\n",
      "1200\n",
      "1300\n",
      "1400\n",
      "0.0\n",
      "0.0\n",
      "0.01\n",
      "0.01\n",
      "0.02\n",
      "0.02\n",
      "0.03\n",
      "0.03\n",
      "0.04\n",
      "0.04\n",
      "0.05\n",
      "0.05\n",
      "0.06\n",
      "0.06\n",
      "0.07\n",
      "0.07\n",
      "0.08\n",
      "0.08\n",
      "0.09\n",
      "0.09\n",
      "0.1\n",
      "0.1\n",
      "0.11\n",
      "0.11\n",
      "0.12\n",
      "0.12\n",
      "0.13\n",
      "0.13\n",
      "0.14\n",
      "0.14\n",
      "0.15\n",
      "0.15\n",
      "0.16\n",
      "0.16\n",
      "0.17\n",
      "0.17\n",
      "0.18\n",
      "0.18\n",
      "0.19\n",
      "0.19\n",
      "0.2\n",
      "0.2\n",
      "0.21\n",
      "0.21\n",
      "0.22\n",
      "0.22\n",
      "0.23\n",
      "0.23\n",
      "0.24\n",
      "0.24\n",
      "0.25\n",
      "0.25\n",
      "0.26\n",
      "0.26\n",
      "0.27\n",
      "0.27\n",
      "0.28\n",
      "0.28\n",
      "0.29\n",
      "0.29\n",
      "0.3\n",
      "0.3\n",
      "0.31\n",
      "0.31\n",
      "0.32\n",
      "0.32\n",
      "0.33\n",
      "0.33\n",
      "0.34\n",
      "0.34\n",
      "0.35000000000000003\n",
      "0.35000000000000003\n",
      "0.36\n",
      "0.36\n",
      "0.37\n",
      "0.37\n",
      "0.38\n",
      "0.38\n",
      "0.39\n",
      "0.39\n",
      "0.4\n",
      "0.4\n",
      "0.41000000000000003\n",
      "0.41000000000000003\n",
      "0.42\n",
      "0.42\n",
      "0.43\n",
      "0.43\n",
      "0.44\n",
      "0.44\n",
      "0.45\n",
      "0.45\n",
      "0.46\n",
      "0.46\n",
      "0.47000000000000003\n",
      "0.47000000000000003\n",
      "0.48\n",
      "0.48\n",
      "0.49\n",
      "0.49\n",
      "0.5\n",
      "0.5\n",
      "0.51\n",
      "0.51\n",
      "0.52\n",
      "0.52\n",
      "0.53\n",
      "0.53\n",
      "0.54\n",
      "0.54\n",
      "0.55\n",
      "0.55\n",
      "0.56\n",
      "0.56\n",
      "0.5700000000000001\n",
      "0.5700000000000001\n",
      "0.58\n",
      "0.58\n",
      "0.59\n",
      "0.59\n",
      "0.6\n",
      "0.6\n",
      "0.61\n",
      "0.61\n",
      "0.62\n",
      "0.62\n",
      "0.63\n",
      "0.63\n",
      "0.64\n",
      "0.64\n",
      "0.65\n",
      "0.65\n",
      "0.66\n",
      "0.66\n",
      "0.67\n",
      "0.67\n",
      "0.68\n",
      "0.68\n",
      "0.6900000000000001\n",
      "0.6900000000000001\n",
      "0.7000000000000001\n",
      "0.7000000000000001\n",
      "0.71\n",
      "0.71\n",
      "0.72\n",
      "0.72\n",
      "0.73\n",
      "0.73\n",
      "0.74\n",
      "0.74\n",
      "0.75\n",
      "0.75\n",
      "0.76\n",
      "0.76\n",
      "0.77\n",
      "0.77\n",
      "0.78\n",
      "0.78\n",
      "0.79\n",
      "0.79\n",
      "0.8\n",
      "0.8\n",
      "0.81\n",
      "0.81\n",
      "0.8200000000000001\n",
      "0.8200000000000001\n",
      "0.8300000000000001\n",
      "0.8300000000000001\n",
      "0.84\n",
      "0.84\n",
      "0.85\n",
      "0.85\n",
      "0.86\n",
      "0.86\n",
      "0.87\n",
      "0.87\n",
      "0.88\n",
      "0.88\n",
      "0.89\n",
      "0.89\n",
      "0.9\n",
      "0.9\n",
      "0.91\n",
      "0.91\n",
      "0.92\n",
      "0.92\n",
      "0.93\n",
      "0.93\n",
      "0.9400000000000001\n",
      "0.9400000000000001\n",
      "0.9500000000000001\n",
      "0.9500000000000001\n",
      "0.96\n",
      "0.96\n",
      "0.97\n",
      "0.97\n",
      "0.98\n",
      "0.98\n",
      "0.99\n",
      "0.99\n",
      "1.0\n",
      "1.0\n",
      "[3512933.8696958595, 3513007.9467956866, 3513099.2099322802, 3513207.8286892683, 3513333.974003185, 3513477.8181685447, 3513639.5348428693, 3513819.2990517714, 3514017.287194006, 3514233.67704654, 3514468.6477695755, 3514722.379911662, 3514995.0554147116, 3515286.8576190784, 3515597.9712686143, 3515928.582515714, 3516278.8789264057, 3516649.049485378, 3517039.284601048, 3517449.77611063, 3517880.71728519, 3518332.302834691, 3518804.728913074, 3519298.1931233015, 3519812.8945224183, 3520349.033626619, 3520906.8124162937, 3521486.4343410973, 3522088.1043249993, 3522712.0287713646, 3523358.415567979, 3524027.474092128, 3524719.4152156585, 3525434.451310025, 3526172.7962513673, 3526934.66542554, 3527720.2757332018, 3528529.845594856, 3529363.5949559216, 3530221.745291772, 3531104.5196128166, 3532012.142469553, 3532944.839957614, 3533902.839722839, 3534886.3709663334, 3535895.6644495195, 3536930.952499195, 3537992.4690126074, 3539080.4494624906, 3540195.1309021437, 3541336.7519704723, 3542505.552897065, 3543701.775507237, 3544925.663227091, 3546177.4610885987, 3547457.4157346133, 3548765.77542398, 3550102.7900365624, 3551468.7110783095, 3552863.7916863137, 3554288.286633877, 3555742.4523355626, 3557226.546852249, 3558740.829896201, 3560285.5628361166, 3561861.0087021985, 3563467.4321912113, 3565105.0996715142, 3566774.2791881682, 3568475.240467943, 3570208.2549244207, 3571973.5956630236, 3573771.5374860824, 3575602.3568979073, 3577466.3321098224, 3579363.74304525, 3581294.8713447624, 3583260.000371113, 3585259.415214346, 3587293.402696801, 3589362.251378226, 3591466.2515607895, 3593605.69529417, 3595780.8763805884, 3597992.0903799008, 3600239.63461463, 3602523.8081750274, 3604844.9119241424, 3607203.248502887, 3609599.122335064, 3612032.839632458, 3614504.70839988, 3617015.038440227, 3619564.1413595453, 3622152.3305720845, 3624779.9213053547, 3627447.2306051953, 3630154.577340826, 3632902.282209897, 3635690.6677435776, 3638520.0583115765]\n"
     ]
    }
   ],
   "source": [
    "beta_alpha_solution_dict = {}\n",
    "beta_alpha_dist_solution_dict = {}\n",
    "total_tt_solution_dict = {}\n",
    "global_city_so = {}\n",
    "for city_name in list_cities:\n",
    "\n",
    "\n",
    "    percentile_val = 98\n",
    "    main_zip = 'Alpha_Objective/' + city_name + '/' + city_name + '-'\n",
    "    main_zip_loc = 'Alpha_Objective/' + city_name + '/'\n",
    "    edges_file = 'Locations/' + city_name + '/edges.csv'\n",
    "    new_folder = 'Alpha_Objective'\n",
    "    specific_city = city_name + '.zip'\n",
    "    od_file = 'Locations/' + city_name + '/od.csv'\n",
    "    loc_ = 'constrained_approach/' + city_name + '/' + city_name +  '-constrained-'\n",
    "\n",
    "    edges = pd.read_csv(edges_file)\n",
    "    edges_arr = np.array(edges)\n",
    "    edges_arr = np.c_[edges_arr, np.array(range(len(edges)))]\n",
    "\n",
    "    flow_so = pd.read_csv(main_zip+'1.00/flow.csv', skiprows = 1)\n",
    "    flow_so_arr = np.array(flow_so)\n",
    "\n",
    "    flow_ue = pd.read_csv(main_zip+'0/flow.csv', skiprows = 1)\n",
    "    flow_ue_arr = np.array(flow_ue)\n",
    "\n",
    "    def find_edge2(tail_, head_):\n",
    "        '''Finds edge index for given edge'''\n",
    "\n",
    "        edges_filtered = edges_arr[edges_arr[:, 0] == tail_]\n",
    "        edges_filtered = edges_filtered[edges_filtered[:, 1] == head_]\n",
    "\n",
    "        return edges_filtered[0, -1]\n",
    "\n",
    "    #Update Flow UE data\n",
    "    edge_num_ue_arr = []\n",
    "    for j in flow_ue.index:\n",
    "        tail_value = int(flow_ue_arr[j, 1])\n",
    "        head_value = int(flow_ue_arr[j, 2])\n",
    "        edge_num_ue_arr.append(find_edge2(tail_value, head_value))\n",
    "\n",
    "    flow_ue_arr = np.c_[flow_ue_arr, edge_num_ue_arr]\n",
    "\n",
    "    #Update Flow SO data\n",
    "    edge_num_so_arr = []\n",
    "    for j in flow_so.index:\n",
    "        tail_value = int(flow_so_arr[j, 1])\n",
    "        head_value = int(flow_so_arr[j, 2])\n",
    "        edge_num_so_arr.append(find_edge2(tail_value, head_value))\n",
    "\n",
    "    flow_so_arr = np.c_[flow_so_arr, edge_num_so_arr]\n",
    "\n",
    "    #Sort flows based on edge indices\n",
    "    flow_ue_arr = flow_ue_arr[flow_ue_arr[:,-1].argsort()]\n",
    "    flow_so_arr = flow_so_arr[flow_so_arr[:,-1].argsort()]\n",
    "\n",
    "    #Store the UE and SO solutions\n",
    "    x_UE_sol = flow_ue_arr[:, 6]\n",
    "    y_SO_sol = flow_so_arr[:, 6]\n",
    "\n",
    "    x_UE_sol = np.array([float(i) for i in x_UE_sol])\n",
    "    y_SO_sol = np.array([float(i) for i in y_SO_sol])\n",
    "\n",
    "    #Define the link latency functions\n",
    "    def link_latency(a_val, power_val, link_ff_cost, link_capacity, link_flow):\n",
    "        '''Calculates latency of link'''\n",
    "        return link_ff_cost*(1+a_val*(link_flow/link_capacity)**power_val)\n",
    "\n",
    "    def get_travel_time(sol_implement):\n",
    "        '''Find the total travel time in a given network'''\n",
    "\n",
    "        return sum([sol_implement[j_val]*link_latency(0.15, 4, int(flow_so_arr[j_val, 3]),  edges_arr[j_val, 3], sol_implement[j_val]) for j_val in range(len(sol_implement))])\n",
    "\n",
    "\n",
    "    paths_so = pd.read_csv(main_zip+'1.00/paths.csv', sep='delimiter', header=None)\n",
    "    paths_ue = pd.read_csv(main_zip+'0/paths.csv', sep='delimiter', header=None)\n",
    "\n",
    "    paths_so = paths_so.iloc[2:]\n",
    "    paths_so = paths_so[0].str.split(',', 2, expand = True)\n",
    "    paths_arr_so = np.array(paths_so)\n",
    "\n",
    "    paths_ue = paths_ue.iloc[2:]\n",
    "    paths_ue = paths_ue[0].str.split(',', 2, expand = True)\n",
    "    paths_arr_ue = np.array(paths_ue)\n",
    "\n",
    "    weights_ue = pd.read_csv(main_zip+'0/weights.csv', skiprows = 1)\n",
    "    weights_ue_arr = np.array(weights_ue)\n",
    "\n",
    "    #Check if weight is at least 1/10th of the maximum weight\n",
    "    small_arr = []\n",
    "    for i in range(len(weights_ue_arr)):\n",
    "        if weights_ue_arr[i, 1] > max(weights_ue_arr[:, 1])/10:\n",
    "            small_arr.append(i)\n",
    "\n",
    "    #Find unique paths\n",
    "    paths_arr_ue[:, 0] = [int(i) for i in paths_arr_ue[:, 0]]\n",
    "    paths_arr_ue = paths_arr_ue[paths_arr_ue[:, 0]>=min(small_arr)]\n",
    "    paths_arr_ue_new = paths_arr_ue[:, 1:]\n",
    "    paths_arr_ue_new = np.vstack({tuple(row) for row in paths_arr_ue_new})\n",
    "\n",
    "    weights_so = pd.read_csv(main_zip+'1.00/weights.csv', skiprows = 1)\n",
    "    weights_so_arr = np.array(weights_so)\n",
    "\n",
    "    #Check if weight is at least 1/10th of the maximum weight\n",
    "    small_arr = []\n",
    "    for i in range(len(weights_so_arr)):\n",
    "        if weights_so_arr[i, 1] > max(weights_so_arr[:, 1])/10:\n",
    "            small_arr.append(i)\n",
    "\n",
    "    #Find unique paths\n",
    "    paths_arr_so[:, 0] = [int(i) for i in paths_arr_so[:, 0]]\n",
    "    paths_arr_so = paths_arr_so[paths_arr_so[:, 0]>=min(small_arr)]\n",
    "    paths_arr_so_new = paths_arr_so[:, 1:]\n",
    "    paths_arr_so_new = np.vstack({tuple(row) for row in paths_arr_so_new})\n",
    "\n",
    "    OD_dict_UE = {}\n",
    "    OD_path_lengths_UE = {}\n",
    "    for OD_pair in range(int(paths_arr_ue[-1, 1])):\n",
    "        OD_arr = paths_arr_ue_new[paths_arr_ue_new[:, 0] == str(OD_pair)]\n",
    "        all_paths_OD = []\n",
    "        OD_tt_paths = []\n",
    "        for path_idx, path_val in enumerate(OD_arr[:, 1]):\n",
    "            all_edges = path_val.split(',')\n",
    "            all_edges = [int(i) for i in all_edges]\n",
    "            list_edges = []\n",
    "            path_tt = 0\n",
    "\n",
    "            for edge_values in all_edges:\n",
    "                list_edges.append(edge_values)\n",
    "                #path_tt += cost_sol[edge_values]\n",
    "                path_tt += link_latency(0.15, 4, int(flow_ue_arr[edge_values, 3]),  edges_arr[edge_values, 3], x_UE_sol[edge_values])\n",
    "\n",
    "            OD_tt_paths.append(path_tt)\n",
    "\n",
    "            #if list_edges not in all_paths_OD:\n",
    "            all_paths_OD.append(list_edges)\n",
    "        if OD_pair%100 == 0:\n",
    "            print(OD_pair)\n",
    "        OD_dict_UE[OD_pair] = all_paths_OD\n",
    "        OD_path_lengths_UE[OD_pair] = OD_tt_paths\n",
    "\n",
    "    OD_dict_SO = {}\n",
    "    OD_path_lengths_SO = {}\n",
    "    for OD_pair in range(int(paths_arr_so[-1, 1])):\n",
    "        OD_arr = paths_arr_so_new[paths_arr_so_new[:, 0] == str(OD_pair)]\n",
    "        all_paths_OD = []\n",
    "        OD_tt_paths = []\n",
    "        for path_val in OD_arr[:, 1]:\n",
    "            all_edges = path_val.split(',')\n",
    "            all_edges = [int(i) for i in all_edges]\n",
    "            list_edges = []\n",
    "            path_tt = 0\n",
    "\n",
    "            for edge_values in all_edges:\n",
    "                list_edges.append(edge_values)\n",
    "                path_tt += link_latency(0.15, 4, int(flow_so_arr[edge_values, 3]),  edges_arr[edge_values, 3], y_SO_sol[edge_values])\n",
    "\n",
    "            OD_tt_paths.append(path_tt)\n",
    "\n",
    "            #if list_edges not in all_paths_OD:\n",
    "            all_paths_OD.append(list_edges)\n",
    "        if OD_pair%100 == 0:\n",
    "            print(OD_pair)\n",
    "        OD_dict_SO[OD_pair] = all_paths_OD\n",
    "        OD_path_lengths_SO[OD_pair] = OD_tt_paths\n",
    "\n",
    "    def dict_union(dict_UE, dict_SO):\n",
    "        '''Find the union of two dictionaries'''\n",
    "        dict_total = {}\n",
    "        for OD_pair in dict_SO:\n",
    "            a = []#dict_total[OD_pair]\n",
    "            for j in dict_SO[OD_pair]:\n",
    "                #if j not in dict_UE[OD_pair]:\n",
    "                a.append(j)\n",
    "            for j in dict_UE[OD_pair]:\n",
    "                if j not in dict_SO[OD_pair]:\n",
    "                    a.append(j)\n",
    "\n",
    "            dict_total[OD_pair] = a\n",
    "\n",
    "        return dict_total\n",
    "\n",
    "    #Take the union of the two dictionaries to find total set of OD pairs\n",
    "    OD_dict = dict_union(OD_dict_UE, OD_dict_SO)\n",
    "\n",
    "    OD_mat = pd.read_csv(od_file)\n",
    "    OD_arr = OD_mat['volume'].values\n",
    "\n",
    "    def beta_calc(OD_dict, convex_comb):\n",
    "        '''Calculate beta for a given alpha value'''\n",
    "\n",
    "        beta_val = []\n",
    "        for OD_pair in OD_dict:\n",
    "            path_OD = []\n",
    "            for path in OD_dict[OD_pair]:\n",
    "                path_tt = 0\n",
    "                for edge in path:\n",
    "                    path_tt += link_latency(0.15, 4, int(flow_so_arr[edge, 3]),  edges_arr[edge, 3], convex_comb[edge])\n",
    "\n",
    "                path_OD.append(path_tt)\n",
    "\n",
    "            #Store max and min paths per OD pair\n",
    "            path_OD_max = max(path_OD)\n",
    "            path_OD_min = min(path_OD)\n",
    "\n",
    "            if path_OD_max-path_OD_min>0.001:\n",
    "                path_OD_beta = path_OD_max/path_OD_min\n",
    "            else:\n",
    "                path_OD_beta = 1\n",
    "\n",
    "            #Find ratio of max and min\n",
    "            beta_val.append(path_OD_beta)\n",
    "\n",
    "        #Find maximum value of beta for this value of alpha\n",
    "        beta = max(beta_val)\n",
    "\n",
    "        return beta\n",
    "\n",
    "    def beta_calc_dist(OD_dict, convex_comb, percentile_val):\n",
    "        '''Calculate beta for a given alpha value'''\n",
    "\n",
    "        beta_val = []\n",
    "        for OD_pair in OD_dict:\n",
    "            path_OD = []\n",
    "            for path_idx, path in enumerate(OD_dict[OD_pair]):\n",
    "                path_tt = 0\n",
    "                for edge in path:\n",
    "                    path_tt += link_latency(0.15, 4, int(flow_so_arr[edge, 3]),  edges_arr[edge, 3], convex_comb[edge])\n",
    "\n",
    "                path_OD.append(path_tt)\n",
    "\n",
    "\n",
    "\n",
    "            #Store max and min paths per OD pair\n",
    "            path_OD_max = max(path_OD)\n",
    "            path_OD_min = min(path_OD)\n",
    "\n",
    "            if path_OD_max-path_OD_min>0.001:\n",
    "                path_OD_beta = path_OD_max/path_OD_min\n",
    "            else:\n",
    "                path_OD_beta = 1\n",
    "\n",
    "            #Find ratio of max and min\n",
    "            beta_val.append(path_OD_beta)\n",
    "\n",
    "        #Find percentile value of beta for this value of alpha\n",
    "        beta_new_val = [item for item, count in zip(beta_val, OD_arr) for i in range(count)]\n",
    "        beta_dist = np.percentile(beta_new_val, percentile_val)\n",
    "\n",
    "        return beta_dist, beta_new_val\n",
    "\n",
    "    #Calculate for each value of alpha the corresponding travel time\n",
    "    total_tt_solution = []\n",
    "    beta_alpha_solution = []\n",
    "    beta_alpha_dist_solution = []\n",
    "    alpha_vals_solution = np.linspace(0, 1, 101)\n",
    "    global_beta = {}\n",
    "    for i in alpha_vals_solution:\n",
    "        convex_comb = i*x_UE_sol + (1-i)*y_SO_sol\n",
    "\n",
    "        total_tt_alpha = get_travel_time(convex_comb)\n",
    "        total_tt_solution.append(total_tt_alpha)\n",
    "        print(i)\n",
    "        #If at extremes then calculate beta according to UE and SO solutions respectively\n",
    "        if i == 0:\n",
    "            beta = beta_calc(OD_dict_SO, convex_comb)\n",
    "            beta2, beta_array = beta_calc_dist(OD_dict_SO, convex_comb, 98)\n",
    "            global_beta[i] = beta_array\n",
    "            global_city_so[city_name] = beta_array\n",
    "        elif i == 1:\n",
    "            beta2, beta_array = beta_calc_dist(OD_dict_UE, convex_comb, 98)\n",
    "            global_beta[i] = beta_array\n",
    "            beta = beta_calc(OD_dict_UE, convex_comb)\n",
    "        else:\n",
    "            beta2, beta_array = beta_calc_dist(OD_dict, convex_comb, 98)\n",
    "            global_beta[i] = beta_array\n",
    "            beta = beta_calc(OD_dict, convex_comb)\n",
    "        print(i)\n",
    "        beta_alpha_dist_solution.append(beta2)\n",
    "        beta_alpha_solution.append(beta)\n",
    "    \n",
    "    beta_alpha_solution = np.array(beta_alpha_solution)\n",
    "    final_beta_plot = [beta_alpha_solution[0]]\n",
    "    total_cost_plot = [total_tt_solution[0]]\n",
    "    for i in range(1, len(alpha_vals_solution)):\n",
    "        restricted_beta = beta_alpha_solution[beta_alpha_solution<beta_alpha_solution[i]]\n",
    "        if len(restricted_beta)>1:\n",
    "            idx_val_arr = []\n",
    "            total_cost_arr = []\n",
    "            for j in range(len(restricted_beta)):\n",
    "                idx_val_arr.append(list(beta_alpha_solution).index(restricted_beta[j]))\n",
    "                total_cost_arr.append(total_tt_solution[idx_val_arr[-1]])\n",
    "\n",
    "            if min(total_cost_arr)>total_tt_solution[i]:\n",
    "                total_cost_plot.append(total_tt_solution[i])\n",
    "                final_beta_plot.append(beta_alpha_solution[i])\n",
    "                \n",
    "        else:\n",
    "            total_cost_plot.append(total_tt_solution[i])\n",
    "            final_beta_plot.append(beta_alpha_solution[i])\n",
    "    \n",
    "    print(total_cost_plot)\n",
    "    total_tt_solution_dict[city_name] = total_cost_plot\n",
    "    beta_alpha_solution_dict[city_name] = final_beta_plot\n",
    "    beta_alpha_dist_solution_dict[city_name] = beta_alpha_dist_solution"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Pareto Frontier"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [],
   "source": [
    "import matplotlib.pyplot as plt"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.legend.Legend at 0x7f9f81c1b898>"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.plot(final_beta_dict['Massachusetts'], total_cost_dict['Massachusetts']/total_cost_dict['Massachusetts'][-1])\n",
    "plt.plot(beta_alpha_solution_dict['Massachusetts'], total_tt_solution_dict['Massachusetts']/total_tt_solution_dict['Massachusetts'][0])\n",
    "plt.plot(final_beta_2005_dict['Massachusetts'], total_cost_2005_dict['Massachusetts']/total_cost_2005_dict['Massachusetts'][-1])\n",
    "plt.xlabel('Level of Loaded UnFairness')\n",
    "plt.ylabel('C(x)/C(SO)')\n",
    "plt.legend([r'$\\alpha$ Objective', r'$\\alpha$ Solution', '2005 Paper'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "\n",
    "\n",
    "alpha_sol_beta_val = [i for idx, i in enumerate(beta_alpha_solution_dict['Massachusetts']) if idx%5 == 0]\n",
    "total_tt_solution_5 = [i for idx, i in  enumerate(total_tt_solution_dict['Massachusetts']) if idx%5 == 0]\n",
    "\n",
    "plt.plot(final_beta_dict['Massachusetts'], total_cost_dict['Massachusetts']/total_cost_dict['Massachusetts'][-1])\n",
    "plt.plot(alpha_sol_beta_val,total_tt_solution_5/total_tt_solution_dict['Massachusetts'][0])\n",
    "plt.plot(final_beta_2005_dict['Massachusetts'], total_cost_2005_dict['Massachusetts']/total_cost_2005_dict['Massachusetts'][-1])\n",
    "plt.ylim([0.995, 1.04])\n",
    "plt.xlabel('Level of Loaded UnFairness')\n",
    "plt.ylabel('C(x)/C(SO)')\n",
    "plt.legend([r'$\\alpha$ Objective', r'$\\alpha$ Solution', '2005 Paper'])\n",
    "\n",
    "import tikzplotlib\n",
    "\n",
    "tikzplotlib.save(\"Massachusetts_pareto.tex\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([1.03652424, 1.03324752, 1.03262934, 1.0307121 , 1.02975565,\n",
       "       1.02815996, 1.02715623, 1.02616884, 1.02519872, 1.02403422,\n",
       "       1.02254556, 1.02198489, 1.02106832, 1.02012272, 1.01926685,\n",
       "       1.01858634, 1.01751916, 1.01651136, 1.01551872, 1.01460529,\n",
       "       1.01373857, 1.01291033, 1.01213488, 1.0115616 , 1.01110466,\n",
       "       1.01044354, 1.01006085, 1.0097125 , 1.00939516, 1.00906468,\n",
       "       1.00871562, 1.00834756, 1.00815331, 1.00786679, 1.00744968,\n",
       "       1.006662  , 1.00674783, 1.00624803, 1.00606395, 1.0057375 ,\n",
       "       1.00540826, 1.00517278, 1.00490673, 1.00460563, 1.00438482,\n",
       "       1.00400763, 1.00390491, 1.00368551, 1.00347662, 1.00329155,\n",
       "       1.00309927, 1.00288761, 1.0027624 , 1.00252751, 1.00242746,\n",
       "       1.00224131, 1.00214305, 1.00200458, 1.00171106, 1.00176828,\n",
       "       1.00168073, 1.0015489 , 1.00144411, 1.0013536 , 1.00125777,\n",
       "       1.00114712, 1.00109146, 1.00101238, 1.00095003, 1.00082213,\n",
       "       1.00074291, 1.0007362 , 1.00063403, 1.00058845, 1.00054922,\n",
       "       1.00060075, 1.00044357, 1.0004042 , 1.00037176, 1.00034057,\n",
       "       1.00029463, 1.00025013, 1.00022481, 1.00019236, 1.00016592,\n",
       "       1.0001317 , 1.00012123, 1.00009922, 1.00007008, 1.00004915,\n",
       "       1.00002022, 1.00001312, 1.00001264, 1.        ])"
      ]
     },
     "execution_count": 29,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "total_cost_dict['Massachusetts']/total_cost_dict['Massachusetts'][-1]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([1.        , 1.03340871, 1.03415105])"
      ]
     },
     "execution_count": 32,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "total_tt_solution_dict['Massachusetts']/total_tt_solution_dict['Massachusetts'][0]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(0.995, 1.1)"
      ]
     },
     "execution_count": 54,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x720 with 6 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig = plt.figure(figsize=(10, 10))\n",
    "ax = fig.add_subplot(231)\n",
    "ax.plot(final_beta_dict['Massachusetts'], total_cost_dict['Massachusetts']/total_cost_dict['Massachusetts'][-1])\n",
    "ax.plot(beta_alpha_solution_dict['Massachusetts'], total_tt_solution_dict['Massachusetts']/total_tt_solution_dict['Massachusetts'][0])\n",
    "ax.plot(final_beta_2005_dict['Massachusetts'], total_cost_2005_dict['Massachusetts']/total_cost_2005_dict['Massachusetts'][-1])\n",
    "ax.set_xlabel('Loaded Unfairness')\n",
    "ax.set_ylabel(r'Inefficiency Ratio $\\rho(\\mathbf{z}(\\alpha))$')\n",
    "ax.legend(['I-TAP', 'I-Solution', 'Jahn et al.'])\n",
    "ax.set_title('Massachusetts')\n",
    "ax.set_ylim([0.995, 1.1])\n",
    "\n",
    "ax2 = fig.add_subplot(232)\n",
    "ax2.plot(final_beta_dict['Tiergarten'], total_cost_dict['Tiergarten']/total_cost_dict['Tiergarten'][-1])\n",
    "ax2.plot(beta_alpha_solution_dict['Tiergarten'], total_tt_solution_dict['Tiergarten']/total_tt_solution_dict['Tiergarten'][0])\n",
    "ax2.plot(final_beta_2005_dict['Tiergarten'], total_cost_2005_dict['Tiergarten']/total_cost_2005_dict['Tiergarten'][-1])\n",
    "ax2.set_xlabel('Loaded Unfairness')\n",
    "ax2.set_ylabel(r'Inefficiency Ratio $\\rho(\\mathbf{z}(\\alpha))$')\n",
    "ax2.legend(['I-TAP', 'I-Solution', 'Jahn et al.'])\n",
    "ax2.set_title('Tiergarten')\n",
    "ax2.set_ylim([0.995, 1.1])\n",
    "\n",
    "ax3 = fig.add_subplot(233)\n",
    "ax3.plot(final_beta_dict['SiouxFalls'], total_cost_dict['SiouxFalls']/total_cost_dict['SiouxFalls'][-1])\n",
    "ax3.plot(beta_alpha_solution_dict['SiouxFalls'], total_tt_solution_dict['SiouxFalls']/total_tt_solution_dict['SiouxFalls'][0])\n",
    "ax3.plot(final_beta_2005_dict['SiouxFalls'], total_cost_2005_dict['SiouxFalls']/total_cost_2005_dict['SiouxFalls'][-1])\n",
    "ax3.set_xlabel('Loaded Unfairness')\n",
    "ax3.set_ylabel(r'Inefficiency Ratio $\\rho(\\mathbf{z}(\\alpha))$')\n",
    "ax3.legend(['I-TAP', 'I-Solution', 'Jahn et al.'])\n",
    "ax3.set_title('SiouxFalls')\n",
    "ax3.set_ylim([0.995, 1.1])\n",
    "\n",
    "ax4 = fig.add_subplot(234)\n",
    "ax4.plot(final_beta_dict['Anaheim'], total_cost_dict['Anaheim']/total_cost_dict['Anaheim'][-1])\n",
    "ax4.plot(beta_alpha_solution_dict['Anaheim'], total_tt_solution_dict['Anaheim']/total_tt_solution_dict['Anaheim'][0])\n",
    "ax4.plot(final_beta_2005_dict['Anaheim'], total_cost_2005_dict['Anaheim']/total_cost_2005_dict['Anaheim'][-1])\n",
    "ax4.set_xlabel('Loaded Unfairness')\n",
    "ax4.set_ylabel(r'Inefficiency Ratio $\\rho(\\mathbf{z}(\\alpha))$')\n",
    "ax4.legend(['I-TAP', 'I-Solution', 'Jahn et al.'])\n",
    "ax4.set_title('Anaheim')\n",
    "ax4.set_ylim([0.995, 1.1])\n",
    "\n",
    "ax5 = fig.add_subplot(235)\n",
    "ax5.plot(final_beta_dict['PrenzlauerbergCenter'], total_cost_dict['PrenzlauerbergCenter']/total_cost_dict['PrenzlauerbergCenter'][-1])\n",
    "ax5.plot(beta_alpha_solution_dict['PrenzlauerbergCenter'], total_tt_solution_dict['PrenzlauerbergCenter']/total_tt_solution_dict['PrenzlauerbergCenter'][0])\n",
    "ax5.plot(final_beta_2005_dict['PrenzlauerbergCenter'], total_cost_2005_dict['PrenzlauerbergCenter']/total_cost_2005_dict['PrenzlauerbergCenter'][-1])\n",
    "ax5.set_xlabel('Loaded Unfairness')\n",
    "ax5.set_ylabel(r'Inefficiency Ratio $\\rho(\\mathbf{z}(\\alpha))$')\n",
    "ax5.legend(['I-TAP', 'I-Solution', 'Jahn et al.'])\n",
    "ax5.set_title('PrenzlauerbergCenter')\n",
    "ax5.set_ylim([0.995, 1.1])\n",
    "\n",
    "ax6 = fig.add_subplot(236)\n",
    "ax6.plot(final_beta_dict['Friedrichshain'], total_cost_dict['Friedrichshain']/total_cost_dict['Friedrichshain'][-1])\n",
    "ax6.plot(beta_alpha_solution_dict['Friedrichshain'], total_tt_solution_dict['Friedrichshain']/total_tt_solution_dict['Friedrichshain'][0])\n",
    "ax6.plot(final_beta_2005_dict['Friedrichshain'], total_cost_2005_dict['Friedrichshain']/total_cost_2005_dict['Friedrichshain'][-1])\n",
    "ax6.set_xlabel('Loaded Unfairness')\n",
    "ax6.set_ylabel(r'Inefficiency Ratio $\\rho(\\mathbf{z}(\\alpha))$')\n",
    "ax6.legend(['I-TAP', 'I-Solution', 'Jahn et al.'])\n",
    "ax6.set_title('Friedrichshain')\n",
    "ax6.set_ylim([0.995, 1.1])\n",
    "\n",
    "#import tikzplotlib\n",
    "\n",
    "#tikzplotlib.save(\"pareto_solution_0.01_discretization.tex\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'Tiergarten': [1.2420437953890286,\n",
       "  1.2406043407735468,\n",
       "  1.2391484017856436,\n",
       "  1.237675924497801,\n",
       "  1.2361868568674423,\n",
       "  1.234681148763434,\n",
       "  1.2331587519922524,\n",
       "  1.231619620323797,\n",
       "  1.2300637095168367,\n",
       "  1.2284909773440709,\n",
       "  1.2269013836167937,\n",
       "  1.2252948902091507,\n",
       "  1.2236714610819601,\n",
       "  1.2220310623061006,\n",
       "  1.220373662085437,\n",
       "  1.218699230779277,\n",
       "  1.2170077409243447,\n",
       "  1.2152991672562503,\n",
       "  1.2135734867304493,\n",
       "  1.2118306785426731,\n",
       "  1.210070724148816,\n",
       "  1.2082936072842683,\n",
       "  1.2064993139826796,\n",
       "  1.2046878325941388,\n",
       "  1.2028591538027578,\n",
       "  1.2010132706436483,\n",
       "  1.1991501785192722,\n",
       "  1.1972698752151638,\n",
       "  1.1953723609149982,\n",
       "  1.1934576382150053,\n",
       "  1.1915257121377112,\n",
       "  1.1895765901449977,\n",
       "  1.1876102821504673,\n",
       "  1.1856268005311028,\n",
       "  1.1836261601382143,\n",
       "  1.1816083783076576,\n",
       "  1.1795734748693165,\n",
       "  1.1775214721558431,\n",
       "  1.1754523950106384,\n",
       "  1.1733662707950738,\n",
       "  1.1712631293949374,\n",
       "  1.169143003226101,\n",
       "  1.1677758507213172,\n",
       "  1.166428139556057,\n",
       "  1.165073802530743,\n",
       "  1.163712825635554,\n",
       "  1.1623451954539459,\n",
       "  1.1609708991652175,\n",
       "  1.1595899245470076,\n",
       "  1.1582022599777182,\n",
       "  1.1568078944388642,\n",
       "  1.1554068175173566,\n",
       "  1.1539990194076992,\n",
       "  1.1525844909141187,\n",
       "  1.1511632234526163,\n",
       "  1.149735209052941,\n",
       "  1.1483004403604842,\n",
       "  1.146858910638097,\n",
       "  1.1454106137678273,\n",
       "  1.1439555442525724,\n",
       "  1.142493697217656,\n",
       "  1.1410250684123198,\n",
       "  1.139549654211131,\n",
       "  1.1380674516153058,\n",
       "  1.1365784582539529,\n",
       "  1.1350826723852263,\n",
       "  1.1335800928973936,\n",
       "  1.1320707193098187,\n",
       "  1.1305545517738573,\n",
       "  1.1290315910736621,\n",
       "  1.1275018386269018,\n",
       "  1.1259652964853926,\n",
       "  1.1244219673356326,\n",
       "  1.1228718544992555,\n",
       "  1.121314961933388,\n",
       "  1.119751294230915,\n",
       "  1.1181808566206577,\n",
       "  1.1166036549674558,\n",
       "  1.1150196957721592,\n",
       "  1.1134289861715247,\n",
       "  1.1118315339380218,\n",
       "  1.110227347479544,\n",
       "  1.108616435839024,\n",
       "  1.1069988086939597,\n",
       "  1.1053744763558402,\n",
       "  1.10374344976948,\n",
       "  1.1021057405122583,\n",
       "  1.1004613607932623,\n",
       "  1.0988103234523363,\n",
       "  1.0971526419590338,\n",
       "  1.0954883304114766,\n",
       "  1.0819370542108213,\n",
       "  1.036061401971661],\n",
       " 'Friedrichshain': [1.586434635654432,\n",
       "  1.5810861765585598,\n",
       "  1.5757241576810104,\n",
       "  1.5703486921255032,\n",
       "  1.564959899482275,\n",
       "  1.559557905761831,\n",
       "  1.554142843325971,\n",
       "  1.5487148508161461,\n",
       "  1.543274073079166,\n",
       "  1.5378206610903147,\n",
       "  1.5323547718739097,\n",
       "  1.5268765684213563,\n",
       "  1.521386219606749,\n",
       "  1.5158839001000557,\n",
       "  1.5103697902779645,\n",
       "  1.5048440761324235,\n",
       "  1.4993069491769446,\n",
       "  1.4937586063507273,\n",
       "  1.4881992499206615,\n",
       "  1.4826290873812782,\n",
       "  1.4770483313527065,\n",
       "  1.4714571994767018,\n",
       "  1.4658559143108232,\n",
       "  1.4602447032208208,\n",
       "  1.4546237982713028,\n",
       "  1.44899343611476,\n",
       "  1.4433538578790166,\n",
       "  1.4377053090531846,\n",
       "  1.4320480393721957,\n",
       "  1.426382302699986,\n",
       "  1.4207083569114114,\n",
       "  1.415026463772979,\n",
       "  1.4093368888224544,\n",
       "  1.4036399012474494,\n",
       "  1.3979357737630491,\n",
       "  1.3922247824885703,\n",
       "  1.386507206823528,\n",
       "  1.3807833293228893,\n",
       "  1.3750534355717023,\n",
       "  1.3693178140591744,\n",
       "  1.3635767560522818,\n",
       "  1.3580682657404786,\n",
       "  1.354157168063724,\n",
       "  1.3502299831311442,\n",
       "  1.3462868850924228,\n",
       "  1.3423280514739169,\n",
       "  1.3383536631252375,\n",
       "  1.3343639041646957,\n",
       "  1.330358961923659,\n",
       "  1.3263390268898287,\n",
       "  1.322304292649479,\n",
       "  1.3182549558286834,\n",
       "  1.314191216033562,\n",
       "  1.3101132757895788,\n",
       "  1.3060213404799224,\n",
       "  1.301915618283002,\n",
       "  1.2977963201090943,\n",
       "  1.29366365953617,\n",
       "  1.289517852744941,\n",
       "  1.2853591184531545,\n",
       "  1.2811876778491829,\n",
       "  1.277003754524921,\n",
       "  1.2728075744080602,\n",
       "  1.2685993656937375,\n",
       "  1.2643793587756307,\n",
       "  1.2601477861765127,\n",
       "  1.255904882478311,\n",
       "  1.251650884251712,\n",
       "  1.2473860299853374,\n",
       "  1.2431105600145462,\n",
       "  1.2388247164498778,\n",
       "  1.2345287431051968,\n",
       "  1.2302228854255601,\n",
       "  1.225907390414852,\n",
       "  1.2245872062983283,\n",
       "  1.2234453097670994,\n",
       "  1.222296066676214,\n",
       "  1.2211394716811763,\n",
       "  1.2199755198568605,\n",
       "  1.2188042066998357,\n",
       "  1.217625528130642,\n",
       "  1.2164394804960197,\n",
       "  1.2152460605710937,\n",
       "  1.2140452655615082,\n",
       "  1.2128370931055132,\n",
       "  1.2116215412760019,\n",
       "  1.2103986085824985,\n",
       "  1.209168293973095,\n",
       "  1.2079305968363372,\n",
       "  1.2066855170030586,\n",
       "  1.2054330547481606,\n",
       "  1.2041732107923429,\n",
       "  1.2030942562001996,\n",
       "  1.2030607098762045,\n",
       "  1.203027073804899,\n",
       "  1.2031114609342803,\n",
       "  1.2032054367386864,\n",
       "  1.203297276995753,\n",
       "  1.2033869860900328,\n",
       "  1.053263670926729],\n",
       " 'Anaheim': [1.1993207803685333, 1.1987700036188917, 1.0349500792809787],\n",
       " 'Massachusetts': [1.4971013263921307, 1.272933765760155, 1.010248267030435],\n",
       " 'SiouxFalls': [1.6064226768116587, 1.34152724648453, 1.0424414302055336],\n",
       " 'PrenzlauerbergCenter': [1.8306807059207784,\n",
       "  1.2501138979688695,\n",
       "  1.0343028828782954]}"
      ]
     },
     "execution_count": 24,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "beta_alpha_solution_dict"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 360x360 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig = plt.figure(figsize=(5, 5))\n",
    "ax = fig.add_subplot(111)\n",
    "ax.plot(final_beta_dict['PrenzlauerbergCenter'], total_cost_dict['PrenzlauerbergCenter']/total_cost_dict['PrenzlauerbergCenter'][-1])\n",
    "ax.plot(beta_alpha_solution_dict['PrenzlauerbergCenter'], total_tt_solution_dict['PrenzlauerbergCenter']/total_tt_solution_dict['PrenzlauerbergCenter'][0])\n",
    "ax.plot(final_beta_2005_dict['PrenzlauerbergCenter'], total_cost_2005_dict['PrenzlauerbergCenter']/total_cost_2005_dict['PrenzlauerbergCenter'][-1])\n",
    "ax.set_xlabel('Loaded Unfairness')\n",
    "ax.set_ylabel(r'Inefficiency Ratio $\\rho(\\mathbf{z}(\\alpha))$')\n",
    "ax.legend(['I-TAP', 'I-Solution', 'Jahn et al.'])\n",
    "ax.set_title('PrenzlauerbergCenter')\n",
    "ax.set_ylim([0.995, 1.1])\n",
    "tikzplotlib.save(\"pareto_solution_PrenzlauerbergCenter_0.01.tex\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "data": {
      "image/png": "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qDC9e/c2O3fuNKWlpWbw4MFm8+bNdfI9++yz5o477jDGGDN37lxz3XXXGWOM2b17txk4cGCTri3Qv+/e+39sdlwxLqA2NASwxgSZJkKJXddMMrl33Om38gN9/xoTefWDasJ/7Pv5L8w3F45pVRmqCf9porl6iNwIBksegoMbfVtm10FwhXcvvDW8+uqr3HjjjWzdupUFCxbUeVsAa5XmHTt21ElftWoVmZmZ9O7dG4ApU6Ywf/78Oqspz58/n0cffRSAyZMnc88994Tc4FRtWYsA2uqe1PqhRr5wqB8iDsG33aCqiRr52loT2g0aAvz73//m+uuvZ+rUqfXGOFu4cCGDBg2qk75v3z66d+9e/T09PZ19+/Y1mC8qKoqkpCSOHDkCwO7duznzzDO54IIL+OSTT3xxSX7BkejCrWPWwheNRekVrR8Ub4gjcpfuCEdNRG7Lmh+8eX+wevVqUlJS6NmzJ+np6dx6660cO3aM5ORkAB588EEef/xxUlJSeOmll+oc783T9xZstr583bp1Izc3l06dOrF27VquvvpqNm/eTKK9CG0w4XS5MKWluMvKcMTEBNocJZTR+qFJ+UKpfog8BJ+OWVNNNCmfvzShLWsB4uGHH64egNgQc+fOZdu2bWRkZNCnTx8KCgp48803q/c/+eSTrF+/nvfff5+srCz27t1bXe4LL7xAeno6e/furc6fl5dHampqnfN45quoqCA/P5+OHTsSGxtLp06dABg2bBh9+vThm2++8cVP4HMcVSGnCrV1TQlttH5QWo3DEVZx3CNdE+qsBYgZM2awfv161q9fX28et9vN66+/zoYNG8jJySEnJ4f58+fX26wL0L179+py77zzTs466yy2b9/O7t27KSsrY968eUycOLHOcRMnTmT27NkAvPHGG1x00UWICIcPH6ayshKAXbt2sX379uq+/GDDWR1ySsetKaGN1g9Kq/H1mLUAE+maiNxu0BBgxYoVpKWlkZaWVp02evRotmzZwoEDB5pURlRUFM888wyXXXYZlZWV3HrrrQwcOBCARx55hOHDhzNx4kRuu+02brzxRjIzM+nYsSPz5s2rtuGRRx4hKioKp9PJCy+8QMeOHX1/sT5AW9bCHxNOTQWtROsHpSHE4QgrZ60phLMmJFxn9AwfPtysWbOmRtrWrVs544wzAmRR+BPo37d47Vr23PAD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\n",
      "text/plain": [
       "<Figure size 720x720 with 6 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig = plt.figure(figsize=(10, 10))\n",
    "ax = fig.add_subplot(231)\n",
    "ax.plot(final_beta_dict['Massachusetts'], total_cost_dict['Massachusetts']/total_cost_dict['Massachusetts'][-1])\n",
    "ax.plot(final_beta_dict_05['Massachusetts'], total_cost_dict_05['Massachusetts']/total_cost_dict_05['Massachusetts'][-1])\n",
    "ax.plot(beta_alpha_solution_dict['Massachusetts'], total_tt_solution_dict['Massachusetts']/total_tt_solution_dict['Massachusetts'][0])\n",
    "ax.plot(final_beta_2005_dict['Massachusetts'], total_cost_2005_dict['Massachusetts']/total_cost_2005_dict['Massachusetts'][-1])\n",
    "ax.set_xlabel('Loaded Unfairness')\n",
    "ax.set_ylabel(r'Inefficiency Ratio $\\rho(\\mathbf{z}(\\alpha))$')\n",
    "ax.legend(['I-TAP-0.01', 'I-TAP-0.05', 'I-Solution', 'Jahn et al.'])\n",
    "ax.set_title('Massachusetts')\n",
    "ax.set_ylim([0.995, 1.1])\n",
    "\n",
    "ax2 = fig.add_subplot(232)\n",
    "ax2.plot(final_beta_dict['Tiergarten'], total_cost_dict['Tiergarten']/total_cost_dict['Tiergarten'][-1])\n",
    "ax2.plot(final_beta_dict_05['Tiergarten'], total_cost_dict_05['Tiergarten']/total_cost_dict_05['Tiergarten'][-1])\n",
    "ax2.plot(beta_alpha_solution_dict['Tiergarten'], total_tt_solution_dict['Tiergarten']/total_tt_solution_dict['Tiergarten'][0])\n",
    "ax2.plot(final_beta_2005_dict['Tiergarten'], total_cost_2005_dict['Tiergarten']/total_cost_2005_dict['Tiergarten'][-1])\n",
    "ax2.set_xlabel('Loaded Unfairness')\n",
    "ax2.set_ylabel(r'Inefficiency Ratio $\\rho(\\mathbf{z}(\\alpha))$')\n",
    "ax2.legend(['I-TAP-0.01', 'I-TAP-0.05', 'I-Solution', 'Jahn et al.'])\n",
    "ax2.set_title('Tiergarten')\n",
    "ax2.set_ylim([0.995, 1.1])\n",
    "\n",
    "ax3 = fig.add_subplot(233)\n",
    "ax3.plot(final_beta_dict['SiouxFalls'], total_cost_dict['SiouxFalls']/total_cost_dict['SiouxFalls'][-1])\n",
    "ax3.plot(final_beta_dict_05['SiouxFalls'], total_cost_dict_05['SiouxFalls']/total_cost_dict_05['SiouxFalls'][-1])\n",
    "ax3.plot(beta_alpha_solution_dict['SiouxFalls'], total_tt_solution_dict['SiouxFalls']/total_tt_solution_dict['SiouxFalls'][0])\n",
    "ax3.plot(final_beta_2005_dict['SiouxFalls'], total_cost_2005_dict['SiouxFalls']/total_cost_2005_dict['SiouxFalls'][-1])\n",
    "ax3.set_xlabel('Loaded Unfairness')\n",
    "ax3.set_ylabel(r'Inefficiency Ratio $\\rho(\\mathbf{z}(\\alpha))$')\n",
    "ax3.legend(['I-TAP-0.01', 'I-TAP-0.05', 'I-Solution', 'Jahn et al.'])\n",
    "ax3.set_title('SiouxFalls')\n",
    "ax3.set_ylim([0.995, 1.1])\n",
    "\n",
    "ax4 = fig.add_subplot(234)\n",
    "ax4.plot(final_beta_dict['Anaheim'], total_cost_dict['Anaheim']/total_cost_dict['Anaheim'][-1])\n",
    "ax4.plot(final_beta_dict_05['Anaheim'], total_cost_dict_05['Anaheim']/total_cost_dict_05['Anaheim'][-1])\n",
    "ax4.plot(beta_alpha_solution_dict['Anaheim'], total_tt_solution_dict['Anaheim']/total_tt_solution_dict['Anaheim'][0])\n",
    "ax4.plot(final_beta_2005_dict['Anaheim'], total_cost_2005_dict['Anaheim']/total_cost_2005_dict['Anaheim'][-1])\n",
    "ax4.set_xlabel('Loaded Unfairness')\n",
    "ax4.set_ylabel(r'Inefficiency Ratio $\\rho(\\mathbf{z}(\\alpha))$')\n",
    "ax4.legend(['I-TAP-0.01', 'I-TAP-0.05', 'I-Solution', 'Jahn et al.'])\n",
    "ax4.set_title('Anaheim')\n",
    "ax4.set_ylim([0.995, 1.1])\n",
    "\n",
    "ax5 = fig.add_subplot(235)\n",
    "ax5.plot(final_beta_dict['PrenzlauerbergCenter'], total_cost_dict['PrenzlauerbergCenter']/total_cost_dict['PrenzlauerbergCenter'][-1])\n",
    "ax5.plot(final_beta_dict_05['PrenzlauerbergCenter'], total_cost_dict_05['PrenzlauerbergCenter']/total_cost_dict_05['PrenzlauerbergCenter'][-1])\n",
    "ax5.plot(beta_alpha_solution_dict['PrenzlauerbergCenter'], total_tt_solution_dict['PrenzlauerbergCenter']/total_tt_solution_dict['PrenzlauerbergCenter'][0])\n",
    "ax5.plot(final_beta_2005_dict['PrenzlauerbergCenter'], total_cost_2005_dict['PrenzlauerbergCenter']/total_cost_2005_dict['PrenzlauerbergCenter'][-1])\n",
    "ax5.set_xlabel('Loaded Unfairness')\n",
    "ax5.set_ylabel(r'Inefficiency Ratio $\\rho(\\mathbf{z}(\\alpha))$')\n",
    "ax5.legend(['I-TAP-0.01', 'I-TAP-0.05', 'I-Solution', 'Jahn et al.'])\n",
    "ax5.set_title('PrenzlauerbergCenter')\n",
    "ax5.set_ylim([0.995, 1.1])\n",
    "\n",
    "ax6 = fig.add_subplot(236)\n",
    "ax6.plot(final_beta_dict['Friedrichshain'], total_cost_dict['Friedrichshain']/total_cost_dict['Friedrichshain'][-1])\n",
    "ax6.plot(final_beta_dict_05['Friedrichshain'], total_cost_dict_05['Friedrichshain']/total_cost_dict_05['Friedrichshain'][-1])\n",
    "ax6.plot(beta_alpha_solution_dict['Friedrichshain'], total_tt_solution_dict['Friedrichshain']/total_tt_solution_dict['Friedrichshain'][0])\n",
    "ax6.plot(final_beta_2005_dict['Friedrichshain'], total_cost_2005_dict['Friedrichshain']/total_cost_2005_dict['Friedrichshain'][-1])\n",
    "ax6.set_xlabel('Loaded Unfairness')\n",
    "ax6.set_ylabel(r'Inefficiency Ratio $\\rho(\\mathbf{z}(\\alpha))$')\n",
    "ax6.legend(['I-TAP-0.01', 'I-TAP-0.05', 'I-Solution', 'Jahn et al.'])\n",
    "ax6.set_title('Friedrichshain')\n",
    "ax6.set_ylim([0.995, 1.1])\n",
    "\n",
    "import tikzplotlib\n",
    "\n",
    "tikzplotlib.save(\"pareto_solution_all_cities.tex\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{}"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "beta_alpha_solution_dict"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Pareto Frontier for Percentiles"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.legend.Legend at 0x7f8310f4ae10>"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.plot(percentile_beta, total_cost/total_cost[-1])\n",
    "plt.plot(beta_alpha_dist_solution, total_tt_solution/total_tt_solution[0])\n",
    "plt.plot(percentile_beta_2005, total_cost_2005/total_cost_2005[-1])\n",
    "plt.xlabel('Level of Loaded UnFairness')\n",
    "plt.ylabel('C(x)/C(SO)')\n",
    "plt.legend([r'$\\alpha$ Objective', r'$\\alpha$ Solution', '2005 Paper'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.legend.Legend at 0x7f8311840dd8>"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.plot(percentile_beta, total_cost/total_cost[-1])\n",
    "plt.plot(beta_alpha_dist_solution, total_tt_solution/total_tt_solution[0])\n",
    "plt.xlabel('Level of Loaded UnFairness {}th percentile'.format(98))\n",
    "plt.ylabel('C(x)/C(SO)')\n",
    "plt.legend([r'$\\alpha$ Objective', r'$\\alpha$ Solution'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Advanced Plotting"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "import matplotlib.pyplot as plt"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 57,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "for city_ in list_cities:\n",
    "    alpha_vals_plot = [float(i) for i in alpha_values]\n",
    "    plt.plot(alpha_vals_plot, total_cost_original_dict[city_]/total_cost_original_dict[city_][-1])\n",
    "    #plt.scatter(alpha_vals_plot, total_cost_dict[city_]/total_cost_dict[city_][-1])\n",
    "    plt.xlabel(r'Convex Combination Parameter $\\alpha$')\n",
    "    plt.ylabel('T($\\mathbf{x}$)/T($\\mathbf{x}^{SO}$)')\n",
    "plt.legend(list_cities)\n",
    "\n",
    "#import tikzplotlib\n",
    "\n",
    "tikzplotlib.save(\"cost_v_alpha_0.01.tex\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 55,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.legend.Legend at 0x7f8b57c5c860>"
      ]
     },
     "execution_count": 55,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "for city_ in list_cities:\n",
    "    alpha_vals_plot = [float(i) for i in alpha_values]\n",
    "    plt.plot(alpha_vals_plot, final_beta_original_dict[city_])\n",
    "    #plt.scatter(alpha_vals_plot, final_beta_dict[city_])\n",
    "    plt.xlabel(r'Convex Combination Parameter $\\alpha$')\n",
    "    plt.ylabel('Unfairness')\n",
    "plt.legend(list_cities)\n",
    "\n",
    "#import tikzplotlib\n",
    "\n",
    "#tikzplotlib.save(\"alpha_v_beta_0.01.tex\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 63,
   "metadata": {},
   "outputs": [],
   "source": [
    "P_center = final_beta_original_dict[\"Friedrichshain\"]\n",
    "actual_P_center = []\n",
    "outlier_P_center = []\n",
    "actual_alpha = []\n",
    "outlier_alpha = []\n",
    "for idx, i in enumerate(P_center):\n",
    "    if idx == 0:\n",
    "        actual_P_center.append(i)\n",
    "        actual_alpha.append(0.0)\n",
    "    \n",
    "    else:\n",
    "        if (i - actual_P_center[-1])/(actual_P_center[-1])*100<=10:\n",
    "            actual_P_center.append(i)\n",
    "            actual_alpha.append(idx*0.01)\n",
    "        else:\n",
    "            outlier_P_center.append(i)\n",
    "            outlier_alpha.append(idx*0.01)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 65,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.collections.PathCollection at 0x7f8b6592ed30>"
      ]
     },
     "execution_count": 65,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.plot(actual_alpha, actual_P_center)\n",
    "plt.scatter(outlier_alpha, outlier_P_center)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 83,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[]\n",
      "[]\n",
      "[2.28721569467868]\n",
      "[0.8300000000000001]\n",
      "[1.2437134277340913]\n",
      "[0.49]\n",
      "[1.342240951339166, 1.572448082537155, 1.7120254807551227]\n",
      "[0.22, 0.38, 0.87]\n",
      "[1.1998939677425167, 1.253628363230691, 1.6073881551270996, 1.5643621540951285, 1.5213571930034206, 1.5344147712254033]\n",
      "[0.05, 0.1, 0.14, 0.22, 0.25, 0.26]\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "Text(0, 0.5, 'Unfairness')"
      ]
     },
     "execution_count": 83,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "for city_ in list_cities:\n",
    "    if city_ != \"PrenzlauerbergCenter\":\n",
    "        P_center = final_beta_original_dict[city_]\n",
    "        actual_P_center = []\n",
    "        outlier_P_center = []\n",
    "        actual_alpha = []\n",
    "        outlier_alpha = []\n",
    "        for idx, i in enumerate(P_center):\n",
    "            if idx == 0:\n",
    "                actual_P_center.append(i)\n",
    "                actual_alpha.append(0.0)\n",
    "\n",
    "            else:\n",
    "                if (i - actual_P_center[-1])/(actual_P_center[-1])*100<=9:\n",
    "                    actual_P_center.append(i)\n",
    "                    actual_alpha.append(idx*0.01)\n",
    "                else:\n",
    "                    outlier_P_center.append(i)\n",
    "                    outlier_alpha.append(idx*0.01)\n",
    "                    \n",
    "        print(outlier_P_center)\n",
    "        print(outlier_alpha)\n",
    "\n",
    "        plt.plot(actual_alpha, actual_P_center)\n",
    "        plt.scatter(outlier_alpha, outlier_P_center)\n",
    "        \n",
    "    else:\n",
    "        alpha_vals_plot = [float(i) for i in alpha_values]\n",
    "        plt.plot(alpha_vals_plot, final_beta_original_dict[city_])\n",
    "    \n",
    "plt.xlabel(r'Convex Combination Parameter $\\alpha$')\n",
    "plt.ylabel('Unfairness')\n",
    "\n",
    "#tikzplotlib.save(\"alpha_v_beta_outliers.tex\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 73,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([1.03672245, 1.04445747, 1.02263448, 1.0255018 , 1.04287081,\n",
       "       1.05076227, 1.05786024, 1.05388727, 1.06119701, 1.18628936,\n",
       "       1.1967912 , 1.21395588, 1.23796791, 1.24537947, 1.26033374,\n",
       "       1.27672704, 1.29039888, 1.30500703, 1.31737458, 1.33057674,\n",
       "       1.34368012, 1.35663634, 1.36815923, 1.38070455, 1.39230905,\n",
       "       1.40438804, 1.41533613, 1.42597593, 1.43663419, 1.44682965,\n",
       "       1.45762548, 1.46741658, 1.47694577, 1.49076795, 1.49564131,\n",
       "       1.50461905, 1.5138675 , 1.53805307, 1.53111301, 1.53922884,\n",
       "       1.54757725, 1.5543529 , 1.56605753, 1.57157096, 1.57916777,\n",
       "       1.58572771, 1.59375832, 1.60651312, 1.60815591, 1.61516804,\n",
       "       1.62210348, 1.62870806, 1.63543667, 1.64245871, 1.64757385,\n",
       "       1.65850069, 1.6611195 , 1.67076107, 1.6719107 , 1.67745164,\n",
       "       1.69040935, 1.68872682, 1.69522925, 1.69990499, 1.70503389,\n",
       "       1.71044076, 1.7154739 , 1.72127915, 1.72532146, 1.73053554,\n",
       "       1.73459477, 1.76698958, 1.73931791, 1.74943616, 1.7518942 ,\n",
       "       1.75815161, 1.76270878, 1.76711023, 1.76210367, 1.77589082,\n",
       "       1.77959338, 1.78408825, 1.78647076, 1.79396615, 1.7956423 ,\n",
       "       1.80052617, 1.80340139, 1.80511886, 1.81108401, 1.81373778,\n",
       "       1.81775971, 1.82209283, 1.82877418, 1.82835602, 1.83723506,\n",
       "       1.83525901, 1.83911862, 1.84214251, 1.84544253, 1.84849554,\n",
       "       1.8521902 ])"
      ]
     },
     "execution_count": 73,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "final_beta_original_dict[city_]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [],
   "source": [
    "import matplotlib.pyplot as plt"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/devanshjalota/anaconda3/lib/python3.7/site-packages/ipykernel_launcher.py:3: VisibleDeprecationWarning: Passing `normed=True` on non-uniform bins has always been broken, and computes neither the probability density function nor the probability mass function. The result is only correct if the bins are uniform, when density=True will produce the same result anyway. The argument will be removed in a future version of numpy.\n",
      "  This is separate from the ipykernel package so we can avoid doing imports until\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "num_bins = 20\n",
    "for num_ in ['Tiergarten', 'Friedrichshain', 'Anaheim', 'Massachusetts', 'SiouxFalls', 'PrenzlauerbergCenter']:\n",
    "    counts, bin_edges = np.histogram (global_city_so[num_], bins=num_bins, normed=True)\n",
    "    cdf = np.cumsum (counts)\n",
    "    plt.plot (bin_edges[1:], cdf/cdf[-1])\n",
    "plt.legend(['Tiergarten', 'Friedrichshain', 'Anaheim', 'Massachusetts', 'SiouxFalls', 'PrenzlauerbergCenter'])\n",
    "plt.xlabel('Unfairness')\n",
    "plt.ylabel('Probability')\n",
    "plt.text(1.5, 0.9, 'matplotlib', horizontalalignment='center', verticalalignment='center')\n",
    "import tikzplotlib\n",
    "\n",
    "tikzplotlib.save(\"text_test.tex\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 58,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "dict_keys(['Tiergarten', 'Friedrichshain', 'Anaheim', 'Massachusetts', 'SiouxFalls', 'PrenzlauerbergCenter'])"
      ]
     },
     "execution_count": 58,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "global_city_so.keys()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(0, 4000)"
      ]
     },
     "execution_count": 41,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "num_bins = 20\n",
    "#counts, bin_edges = np.histogram (global_city_so[num_], bins=num_bins, normed=True)\n",
    "#cdf = np.cumsum (counts)\n",
    "plt.hist (global_city_so['Massachusetts'], bins = 20)\n",
    "#plt.legend(['Tiergarten', 'Friedrichshain', 'Anaheim', 'Massachusetts', 'SiouxFalls', 'PrenzlauerbergCenter'])\n",
    "plt.xlabel('Unfairness')\n",
    "plt.ylabel('Probability')\n",
    "plt.xlim([1.025, 1.5])\n",
    "plt.ylim([0, 4000])\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[1.122317084082124,\n",
       " 1.122317084082124,\n",
       " 1.122317084082124,\n",
       " 1.122317084082124,\n",
       " 1.122317084082124,\n",
       " 1.122317084082124,\n",
       " 1.122317084082124,\n",
       " 1.122317084082124,\n",
       " 1.122317084082124,\n",
       " 1.122317084082124,\n",
       " 1.122317084082124,\n",
       " 1.122317084082124,\n",
       " 1.122317084082124,\n",
       " 1.122317084082124,\n",
       " 1.122317084082124,\n",
       " 1.122317084082124,\n",
       " 1.122317084082124,\n",
       " 1.122317084082124,\n",
       " 1.122317084082124,\n",
       " 1.122317084082124,\n",
       " 1.122317084082124,\n",
       " 1.122317084082124,\n",
       " 1.122317084082124,\n",
       " 1.122317084082124,\n",
       " 1.122317084082124,\n",
       " 1.122317084082124,\n",
       " 1.122317084082124,\n",
       " 1.122317084082124,\n",
       " 1.122317084082124,\n",
       " 1.122317084082124,\n",
       " 1.122317084082124,\n",
       " 1.122317084082124,\n",
       " 1.122317084082124,\n",
       " 1.122317084082124,\n",
       " 1.122317084082124,\n",
       " 1.122317084082124,\n",
       " 1.122317084082124,\n",
       " 1.122317084082124,\n",
       " 1.122317084082124,\n",
       " 1.122317084082124,\n",
       " 1.122317084082124,\n",
       " 1.122317084082124,\n",
       " 1.122317084082124,\n",
       " 1.122317084082124,\n",
       " 1.122317084082124,\n",
       " 1.122317084082124,\n",
       " 1.122317084082124,\n",
       " 1.122317084082124,\n",
       " 1.122317084082124,\n",
       " 1.122317084082124,\n",
       " 1.122317084082124,\n",
       " 1.122317084082124,\n",
       " 1.122317084082124,\n",
       " 1.122317084082124,\n",
       " 1.122317084082124,\n",
       " 1.122317084082124,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1.06766225436071,\n",
       " 1.06766225436071,\n",
       " 1.06766225436071,\n",
       " 1.06766225436071,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1.0512511297706855,\n",
       " 1.0512511297706855,\n",
       " 1.0512511297706855,\n",
       " 1.0512511297706855,\n",
       " 1.0728846998013277,\n",
       " 1.0728846998013277,\n",
       " 1.0728846998013277,\n",
       " 1.0728846998013277,\n",
       " 1.0728846998013277,\n",
       " 1.0728846998013277,\n",
       " 1.0728846998013277,\n",
       " 1.0728846998013277,\n",
       " 1.0728846998013277,\n",
       " 1.0728846998013277,\n",
       " 1.0728846998013277,\n",
       " 1.122317084082124,\n",
       " 1.122317084082124,\n",
       " 1.122317084082124,\n",
       " 1.122317084082124,\n",
       " 1.122317084082124,\n",
       " 1.122317084082124,\n",
       " 1.122317084082124,\n",
       " 1.122317084082124,\n",
       " 1.122317084082124,\n",
       " 1.122317084082124,\n",
       " 1.122317084082124,\n",
       " 1.122317084082124,\n",
       " 1.122317084082124,\n",
       " 1.122317084082124,\n",
       " 1.122317084082124,\n",
       " 1.122317084082124,\n",
       " 1.122317084082124,\n",
       " 1.122317084082124,\n",
       " 1.122317084082124,\n",
       " 1.122317084082124,\n",
       " 1.122317084082124,\n",
       " 1.122317084082124,\n",
       " 1.122317084082124,\n",
       " 1.122317084082124,\n",
       " 1.122317084082124,\n",
       " 1.122317084082124,\n",
       " 1.122317084082124,\n",
       " 1.122317084082124,\n",
       " 1.122317084082124,\n",
       " 1.122317084082124,\n",
       " 1.122317084082124,\n",
       " 1.122317084082124,\n",
       " 1.122317084082124,\n",
       " 1.122317084082124,\n",
       " 1.122317084082124,\n",
       " 1.122317084082124,\n",
       " 1.122317084082124,\n",
       " 1.122317084082124,\n",
       " 1.122317084082124,\n",
       " 1.122317084082124,\n",
       " 1.122317084082124,\n",
       " 1.122317084082124,\n",
       " 1.122317084082124,\n",
       " 1.122317084082124,\n",
       " 1.122317084082124,\n",
       " 1.122317084082124,\n",
       " 1.122317084082124,\n",
       " 1.122317084082124,\n",
       " 1.122317084082124,\n",
       " 1.122317084082124,\n",
       " 1.122317084082124,\n",
       " 1.122317084082124,\n",
       " 1.122317084082124,\n",
       " 1.122317084082124,\n",
       " 1.122317084082124,\n",
       " 1.122317084082124,\n",
       " 1.122317084082124,\n",
       " 1.122317084082124,\n",
       " 1.122317084082124,\n",
       " 1.122317084082124,\n",
       " 1.122317084082124,\n",
       " 1.122317084082124,\n",
       " 1.122317084082124,\n",
       " 1.122317084082124,\n",
       " 1.122317084082124,\n",
       " 1.122317084082124,\n",
       " 1.122317084082124,\n",
       " 1.122317084082124,\n",
       " 1.122317084082124,\n",
       " 1.122317084082124,\n",
       " 1.122317084082124,\n",
       " 1.122317084082124,\n",
       " 1.122317084082124,\n",
       " 1.122317084082124,\n",
       " 1.122317084082124,\n",
       " 1.122317084082124,\n",
       " 1.122317084082124,\n",
       " 1.122317084082124,\n",
       " 1.122317084082124,\n",
       " 1.122317084082124,\n",
       " 1.122317084082124,\n",
       " 1.122317084082124,\n",
       " 1.122317084082124,\n",
       " 1.122317084082124,\n",
       " 1.122317084082124,\n",
       " 1.122317084082124,\n",
       " 1.122317084082124,\n",
       " 1.122317084082124,\n",
       " 1.122317084082124,\n",
       " 1.122317084082124,\n",
       " 1.122317084082124,\n",
       " 1.122317084082124,\n",
       " 1.122317084082124,\n",
       " 1.122317084082124,\n",
       " 1.122317084082124,\n",
       " 1.122317084082124,\n",
       " 1.122317084082124,\n",
       " 1.122317084082124,\n",
       " 1.122317084082124,\n",
       " 1.122317084082124,\n",
       " 1.122317084082124,\n",
       " 1.122317084082124,\n",
       " 1.122317084082124,\n",
       " 1.122317084082124,\n",
       " 1.122317084082124,\n",
       " 1.122317084082124,\n",
       " 1.122317084082124,\n",
       " 1.122317084082124,\n",
       " 1.122317084082124,\n",
       " 1.122317084082124,\n",
       " 1.122317084082124,\n",
       " 1.122317084082124,\n",
       " 1.122317084082124,\n",
       " 1.122317084082124,\n",
       " 1.122317084082124,\n",
       " 1.122317084082124,\n",
       " 1.122317084082124,\n",
       " 1.122317084082124,\n",
       " 1.122317084082124,\n",
       " 1.122317084082124,\n",
       " 1.059890598551448,\n",
       " 1.059890598551448,\n",
       " 1.059890598551448,\n",
       " 1.059890598551448,\n",
       " 1.059890598551448,\n",
       " 1.059890598551448,\n",
       " 1.059890598551448,\n",
       " 1.059890598551448,\n",
       " 1.059890598551448,\n",
       " 1.059890598551448,\n",
       " 1.059890598551448,\n",
       " 1.059890598551448,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1.061160719564703,\n",
       " 1.061160719564703,\n",
       " 1.061160719564703,\n",
       " 1.061160719564703,\n",
       " 1.061160719564703,\n",
       " 1.061160719564703,\n",
       " 1.067683044477698,\n",
       " 1.067683044477698,\n",
       " 1.067683044477698,\n",
       " 1.067683044477698,\n",
       " 1.067683044477698,\n",
       " 1.067683044477698,\n",
       " 1.067683044477698,\n",
       " 1.067683044477698,\n",
       " 1.067683044477698,\n",
       " 1.067683044477698,\n",
       " 1.067683044477698,\n",
       " 1.067683044477698,\n",
       " 1.067683044477698,\n",
       " 1.0512511297706855,\n",
       " 1.0512511297706855,\n",
       " 1.0512511297706855,\n",
       " 1.0512511297706855,\n",
       " 1.0512511297706855,\n",
       " 1.0512511297706855,\n",
       " 1.0512511297706855,\n",
       " 1.0512511297706855,\n",
       " 1.0512511297706855,\n",
       " 1.0512511297706855,\n",
       " 1.0512511297706855,\n",
       " 1.0512511297706855,\n",
       " 1.0512511297706855,\n",
       " 1.0512511297706855,\n",
       " 1.0512511297706855,\n",
       " 1.0512511297706855,\n",
       " 1.0512511297706855,\n",
       " 1.0512511297706855,\n",
       " 1.0512511297706855,\n",
       " 1.0512511297706855,\n",
       " 1.067683044477698,\n",
       " 1.067683044477698,\n",
       " 1.067683044477698,\n",
       " 1.067683044477698,\n",
       " 1.067683044477698,\n",
       " 1.067683044477698,\n",
       " 1.067683044477698,\n",
       " 1.067683044477698,\n",
       " 1.067683044477698,\n",
       " 1.067683044477698,\n",
       " 1.067683044477698,\n",
       " 1.067683044477698,\n",
       " 1.067683044477698,\n",
       " 1.067683044477698,\n",
       " 1.067683044477698,\n",
       " 1.067683044477698,\n",
       " 1.067683044477698,\n",
       " 1.067683044477698,\n",
       " 1.067683044477698,\n",
       " 1.067683044477698,\n",
       " 1.067683044477698,\n",
       " 1.067683044477698,\n",
       " 1.067683044477698,\n",
       " 1.067683044477698,\n",
       " 1.067683044477698,\n",
       " 1.067683044477698,\n",
       " 1.067683044477698,\n",
       " 1.067683044477698,\n",
       " 1.067683044477698,\n",
       " 1.067683044477698,\n",
       " 1.067683044477698,\n",
       " 1.067683044477698,\n",
       " 1.067683044477698,\n",
       " 1.067683044477698,\n",
       " 1.067683044477698,\n",
       " 1.067683044477698,\n",
       " 1.067683044477698,\n",
       " 1.067683044477698,\n",
       " 1.067683044477698,\n",
       " 1.067683044477698,\n",
       " 1.067683044477698,\n",
       " 1.067683044477698,\n",
       " 1.067683044477698,\n",
       " 1.067683044477698,\n",
       " 1.067683044477698,\n",
       " 1.067683044477698,\n",
       " 1.067683044477698,\n",
       " 1.067683044477698,\n",
       " 1.067683044477698,\n",
       " 1.067683044477698,\n",
       " 1.067683044477698,\n",
       " 1.067683044477698,\n",
       " 1.067683044477698,\n",
       " 1.067683044477698,\n",
       " 1.067683044477698,\n",
       " 1.067683044477698,\n",
       " 1.067683044477698,\n",
       " 1.067683044477698,\n",
       " 1.067683044477698,\n",
       " 1.067683044477698,\n",
       " 1.067683044477698,\n",
       " 1.067683044477698,\n",
       " 1.067683044477698,\n",
       " 1.067683044477698,\n",
       " 1.067683044477698,\n",
       " 1.067683044477698,\n",
       " 1.067683044477698,\n",
       " 1.067683044477698,\n",
       " 1.067683044477698,\n",
       " 1.067683044477698,\n",
       " 1.067683044477698,\n",
       " 1.067683044477698,\n",
       " 1.067683044477698,\n",
       " 1.067683044477698,\n",
       " 1.067683044477698,\n",
       " 1.067683044477698,\n",
       " 1.067683044477698,\n",
       " 1.067683044477698,\n",
       " 1.067683044477698,\n",
       " 1.067683044477698,\n",
       " 1.067683044477698,\n",
       " 1.067683044477698,\n",
       " 1.067683044477698,\n",
       " 1.067683044477698,\n",
       " 1.067683044477698,\n",
       " 1.067683044477698,\n",
       " 1.067683044477698,\n",
       " 1.067683044477698,\n",
       " 1.067683044477698,\n",
       " 1.0512511297706855,\n",
       " 1.0512511297706855,\n",
       " 1.0512511297706855,\n",
       " 1.0512511297706855,\n",
       " 1.0799779412017316,\n",
       " 1.0799779412017316,\n",
       " 1.0799779412017316,\n",
       " 1.0799779412017316,\n",
       " 1.0799779412017316,\n",
       " 1.0799779412017316,\n",
       " 1.0799779412017316,\n",
       " 1.0799779412017316,\n",
       " 1.0799779412017316,\n",
       " 1.0799779412017316,\n",
       " 1.0799779412017316,\n",
       " 1.0799779412017316,\n",
       " 1.0799779412017316,\n",
       " 1.0799779412017316,\n",
       " 1.0799779412017316,\n",
       " 1.0799779412017316,\n",
       " 1.0799779412017316,\n",
       " 1.0799779412017316,\n",
       " 1.0799779412017316,\n",
       " 1.0799779412017316,\n",
       " 1.0460890300084076,\n",
       " 1.0460890300084076,\n",
       " 1.0460890300084076,\n",
       " 1.0460890300084076,\n",
       " 1.0460890300084076,\n",
       " 1.0460890300084076,\n",
       " 1.0460890300084076,\n",
       " 1.0460890300084076,\n",
       " 1.0460890300084076,\n",
       " 1.0460890300084076,\n",
       " 1.0400192150268692,\n",
       " 1.0400192150268692,\n",
       " 1.0400192150268692,\n",
       " 1.0400192150268692,\n",
       " 1.0400192150268692,\n",
       " 1.0400192150268692,\n",
       " 1.0400192150268692,\n",
       " 1.0400192150268692,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1.059890598551448,\n",
       " 1.059890598551448,\n",
       " 1.059890598551448,\n",
       " 1.059890598551448,\n",
       " 1.059890598551448,\n",
       " 1.059890598551448,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1.0512511297706855,\n",
       " 1.0512511297706855,\n",
       " 1.0512511297706855,\n",
       " 1.0512511297706855,\n",
       " 1.0512511297706855,\n",
       " 1.0512511297706855,\n",
       " 1.0512511297706855,\n",
       " 1.0512511297706855,\n",
       " 1.0512511297706855,\n",
       " 1.0512511297706855,\n",
       " 1.0512511297706855,\n",
       " 1.0512511297706855,\n",
       " 1.0512511297706855,\n",
       " 1.0512511297706855,\n",
       " 1.0512511297706855,\n",
       " 1.0512511297706855,\n",
       " 1.0512511297706855,\n",
       " 1.0512511297706855,\n",
       " 1.0512511297706855,\n",
       " 1.0653482260804215,\n",
       " 1.0653482260804215,\n",
       " 1.0653482260804215,\n",
       " 1.0653482260804215,\n",
       " 1.0400192150268692,\n",
       " 1.0400192150268692,\n",
       " 1.0400192150268692,\n",
       " 1.1084404220891075,\n",
       " 1.1084404220891075,\n",
       " 1.1084404220891075,\n",
       " 1.1084404220891075,\n",
       " 1.1084404220891075,\n",
       " 1.1084404220891075,\n",
       " 1.1084404220891075,\n",
       " 1.1084404220891075,\n",
       " 1.1084404220891075,\n",
       " 1.1084404220891075,\n",
       " 1.1084404220891075,\n",
       " 1.1084404220891075,\n",
       " 1.1084404220891075,\n",
       " 1.1084404220891075,\n",
       " 1.1084404220891075,\n",
       " 1.0463554439199616,\n",
       " 1.0463554439199616,\n",
       " 1.0463554439199616,\n",
       " 1.091523306395238,\n",
       " 1.091523306395238,\n",
       " 1.091523306395238,\n",
       " 1.091523306395238,\n",
       " 1.091523306395238,\n",
       " 1.091523306395238,\n",
       " 1.091523306395238,\n",
       " 1.091523306395238,\n",
       " 1.091523306395238,\n",
       " 1.091523306395238,\n",
       " 1.091523306395238,\n",
       " 1.091523306395238,\n",
       " 1.091523306395238,\n",
       " 1.091523306395238,\n",
       " 1.091523306395238,\n",
       " 1.091523306395238,\n",
       " 1.091523306395238,\n",
       " 1.091523306395238,\n",
       " 1.091523306395238,\n",
       " 1.091523306395238,\n",
       " 1.091523306395238,\n",
       " 1.091523306395238,\n",
       " 1.091523306395238,\n",
       " 1.091523306395238,\n",
       " 1.091523306395238,\n",
       " 1.091523306395238,\n",
       " 1.091523306395238,\n",
       " 1.091523306395238,\n",
       " 1.091523306395238,\n",
       " 1.091523306395238,\n",
       " 1.091523306395238,\n",
       " 1.091523306395238,\n",
       " 1.091523306395238,\n",
       " 1.091523306395238,\n",
       " 1.091523306395238,\n",
       " 1.091523306395238,\n",
       " 1.091523306395238,\n",
       " 1.091523306395238,\n",
       " 1.091523306395238,\n",
       " 1.091523306395238,\n",
       " 1.091523306395238,\n",
       " 1.091523306395238,\n",
       " 1.091523306395238,\n",
       " 1.091523306395238,\n",
       " 1.091523306395238,\n",
       " 1.091523306395238,\n",
       " 1.091523306395238,\n",
       " 1.091523306395238,\n",
       " 1.091523306395238,\n",
       " 1.091523306395238,\n",
       " 1.091523306395238,\n",
       " 1.091523306395238,\n",
       " 1.091523306395238,\n",
       " 1.091523306395238,\n",
       " 1.091523306395238,\n",
       " 1.091523306395238,\n",
       " 1.091523306395238,\n",
       " 1.1212769201865813,\n",
       " 1.1212769201865813,\n",
       " 1.1212769201865813,\n",
       " 1.1212769201865813,\n",
       " 1.1212769201865813,\n",
       " 1.1212769201865813,\n",
       " 1.1212769201865813,\n",
       " 1.1212769201865813,\n",
       " 1.1212769201865813,\n",
       " 1.1212769201865813,\n",
       " 1.1212769201865813,\n",
       " 1.1212769201865813,\n",
       " 1.1212769201865813,\n",
       " 1.1212769201865813,\n",
       " 1.1212769201865813,\n",
       " 1.1212769201865813,\n",
       " 1.1212769201865813,\n",
       " 1.1212769201865813,\n",
       " 1.1212769201865813,\n",
       " 1.1212769201865813,\n",
       " 1.1212769201865813,\n",
       " 1.1212769201865813,\n",
       " 1.1212769201865813,\n",
       " 1.1212769201865813,\n",
       " 1.1212769201865813,\n",
       " 1.1212769201865813,\n",
       " 1.1212769201865813,\n",
       " 1.1212769201865813,\n",
       " 1.1212769201865813,\n",
       " 1.1212769201865813,\n",
       " 1.1212769201865813,\n",
       " 1.1212769201865813,\n",
       " 1.1212769201865813,\n",
       " 1.1212769201865813,\n",
       " 1.1212769201865813,\n",
       " 1.1212769201865813,\n",
       " 1.1212769201865813,\n",
       " 1.1212769201865813,\n",
       " 1.1212769201865813,\n",
       " 1.1212769201865813,\n",
       " 1.1212769201865813,\n",
       " 1.1212769201865813,\n",
       " 1.1212769201865813,\n",
       " 1.1212769201865813,\n",
       " 1.1212769201865813,\n",
       " 1.1212769201865813,\n",
       " 1.1212769201865813,\n",
       " 1.1212769201865813,\n",
       " 1.1212769201865813,\n",
       " 1.1212769201865813,\n",
       " 1.1212769201865813,\n",
       " 1.1212769201865813,\n",
       " 1.1212769201865813,\n",
       " 1.1212769201865813,\n",
       " 1.1212769201865813,\n",
       " 1.1212769201865813,\n",
       " 1.1212769201865813,\n",
       " 1.1212769201865813,\n",
       " 1.1212769201865813,\n",
       " 1.1212769201865813,\n",
       " 1.1212769201865813,\n",
       " 1.1212769201865813,\n",
       " ...]"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "global_city_so[num_]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
